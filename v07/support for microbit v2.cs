'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 8 April 2021 at 8:53:19 pm'!!CommandBlockMorph methodsFor: 'private'!uncoloredArgMorphFor: specString	"Answer an argument morph for the given argument specification string."	| code |	code := specString at: 2.	$a = code ifTrue: [^ AttributeArgMorph new choice: 'volume'].	$b = code ifTrue: [^ BooleanArgMorph new].	$c = code ifTrue: [^ ColorArgMorph new showPalette: true].	$C = code ifTrue: [^ LedArgMorph new].	$d = code ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '0'; menuSelector: #directionMenu].	$D = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #ledClockNames].	$e = code ifTrue: [^ EventTitleMorph new].	$f = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #mathFunctionNames; choice: 'sqrt'].	$g = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #ledSymbolNames].	$H = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #sensorNames].	$h = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupBooleanSensorNames].	$I = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #ledArrowNames].	$i = code ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '0'; menuSelector: #listIndexMenu].	$j = code ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '0'; menuSelector: #ioPinMenu].	$k = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #neoPixelPinNames].	$L = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #listVarMenu].	$l = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #ledCharacterNames].	$m = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #gestureNames].	$M = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #buttonNames].	$n = code ifTrue: [^ ExpressionArgMorph new numExpression: '10'].	$N = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #musicNames].	$s = code ifTrue: [^ ExpressionArgMorph new stringExpression: ''].	$S = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #ledShapeNames].	$T = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #touchPinNames].	$U = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #microphoneNames].	$v = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #varNamesMenu; choice: ''].	$W = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #motorDirection].	$x = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #shiftDirection].	$y = code ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '0'; menuSelector: #listIndexForDeleteMenu].	^ ExpressionArgMorph new numExpression: '10'! !!MicrobitCode methodsFor: 'music blocks'!speakerOff: aMorph	stream nextPutAll: 'speaker.off()'! !!MicrobitCode methodsFor: 'music blocks'!speakerOn: aMorph	stream nextPutAll: 'speaker.on()'! !!MicrobitCode methodsFor: 'sensor blocks'!isEvent: aMorph	^ 'microphone.is_event(SoundEvent.', aMorph blockArgs first choice, ')'! !!MicrobitCode methodsFor: 'sensor blocks'!setThresholdEventvalue: aMorph 	stream nextPutAll: 'microphone.set_threshold(SoundEvent.'.	stream nextPutAll: aMorph blockArgs first choice.	stream nextPutAll: ','.	stream nextPutAll: (aMorph blockArgs second argString: generator).	stream nextPutAll: ')'! !!MicrobitCode methodsFor: 'sensor blocks'!soundLevel: aMorph	^ 'microphone.sound_level()'! !!MicrobitCode methodsFor: 'sensor blocks'!wasEvent: aMorph	^ 'microphone.was_event(SoundEvent.', aMorph blockArgs first choice, ')'! !!MicrobitCode class methodsFor: 'accessing' stamp: 'EiichiroIto 4/8/2021 19:56'!firmwareFor: aSymbol	^ Firmware at: aSymbol! !!MicrobitCode class methodsFor: 'accessing'!firmwareVersions	^ Firmware keys asArray sort! !!MicrobitCode class methodsFor: 'initialization'!readFirmware	"MicrobitCode readFirmware."	| str dict |	dict := Dictionary new.	str := (FileStream fileNamed: 'MicroPython/firmware.hex') contentsOfEntireFile.	str isEmpty		ifFalse: 			[dict at: #v13 put: str.			dict at: #v15 put: str].	str := (FileStream fileNamed: 'MicroPython/firmware20.hex') contentsOfEntireFile.	str isEmpty ifFalse: [dict at: #v20 put: str].	Firmware := dict! !!MicrobitSpriteMorph methodsFor: 'list names' stamp: 'EiichiroIto 3/26/2021 14:27'!microphoneNames	^ #(QUIET LOUD)! !!MicrobitSpriteMorph methodsFor: 'list names'!touchPinNames	^ #('pin_logo' pin0 pin1 pin2)! !!MicrobitSpriteMorph methodsFor: 'io blocks'!pinIsTouched: aString	^ false! !!MicrobitSpriteMorph methodsFor: 'sensing ops' stamp: 'EiichiroIto 3/26/2021 14:58'!isEvent: anObject	^ false! !!MicrobitSpriteMorph methodsFor: 'sensing ops' stamp: 'EiichiroIto 3/26/2021 14:58'!setThresholdEvent: anObject value: anInteger	self! !!MicrobitSpriteMorph methodsFor: 'sensing ops' stamp: 'EiichiroIto 3/26/2021 14:58'!soundLevel	^ 0! !!MicrobitSpriteMorph methodsFor: 'sensing ops' stamp: 'EiichiroIto 3/26/2021 14:58'!wasEvent: anObject	^ false! !!MicrobitSpriteMorph methodsFor: 'sound ops' stamp: 'EiichiroIto 3/26/2021 15:03'!speakerOff	self! !!MicrobitSpriteMorph methodsFor: 'sound ops' stamp: 'EiichiroIto 3/26/2021 15:03'!speakerOn	self! !!MicrobitSpriteMorph class methodsFor: 'block specs'!ioBlocks	^ #(		'io'			('button %M is pressed'			b		buttonIsPressed:)			('button %M was pressed'		b		buttonWasPressed:)			('count of button %M pressed'		r		countOfButtonPressed:)			-			('digital read pin %n'				r		readDigital: 0)			('digital write pin %n to %n'	-		writeDigital:to: 0 0) 			('analog read pin %n'				r		readAnalog: 0)			('analog write pin %n to %n'	- 		writeAnalog:to: 0 0)			('analog set period pin %n to %n usec'	- setAnalogPeriod:msec: 0 500)			('%T is touched'					b		pinIsTouched: 'pin_logo')			-			('servo write pin %j to %n degrees'		-		writeServo:to:					0 180)			('servo set pin %j %n msec %n to %n'	-		setServo:msec:min:max:	0	5	100	500)			('servo set pin %j %n msec'					-		setServo:msec:					0	5)			-			('I2C read addr %n'								r	i2cRead:	0)			('I2C write addr %n data %n'				-	i2cWrite:data:	0 0)			('I2C write addr %n data %n %n'			-	i2cWrite:data:and:	0 0 0)			('I2C write addr %n data %n %n %n'	-	i2cWrite:data:and:and:	0 0 0 0)			('I2C write addr %n data %L'				-	i2cWrite:list:	0)			-			('init exboard'								-	initExBoard)			('servo ch %n degrees %n'			-	exServoCh:degrees: 1 90)			('motor ch %n speed %n'				-	exMotorCh:speed: 1 0)		'neoPixel'			('set %n to r %n g %n b %n of NeoPixel pin %k'		-		setNo:r:g:b:neoPixel: 0 255 255 255 '')			('show NeoPixel of pin %k'								-		showNeoPixel:)			('clear NeoPixel of pin %k'								-		clearNeoPixel:)		)! !!MicrobitSpriteMorph class methodsFor: 'block specs'!sensingBlocks	^ #(		'sensing'			('running time'			r	runningTime)			('ticks ms'					r	ticksMs)			('ticks us'					r	ticksUs)			('light'							r	light)			('temperature'				r	temperature)			('%H sensor value'		r	sensorValueOf: 'accelX')			-			('current gesture'		r	currentGesture)			('is gesture %m ?'		b	isGesture: up)			('was gesture %m ?'		b	wasGesture: up)			('gestures'					r	gestures)			-			('calibrate compass'		-	calibrateCompass)			('is calibrated'				b	isCalibrated)			('heading'						r	headingCompass)			('clear calibration'		-	clearCalibration)			('field strength'			r	fieldStrength)			-			('was event %U ?'			b	wasEvent:	LOUD)			('is event %U ?'			b	isEvent:	LOUD)			('set threshold event %U value %n'												-	setThresholdEvent:value:		LOUD	100)			('sound level'				r	soundLevel)			-			('set usonic trig %j echo %j'	-	setUsonicTrig:echo:	1 2)			('usonic distance'		r	usonicDistance)	)! !!MicrobitSpriteMorph class methodsFor: 'block specs'!soundBlocks	^ #(		'sound'			('play music %N'						-	playMusicSymbol: nyan)			('play music %N repeat'			-	playMusicSymbolRepeatNoWait: nyan)			('play music %N repeat until done'			-	playMusicSymbolRepeat: nyan)			('play music %N until done'	-	playMusicSymbolWait: nyan)			('play music %L'				-	playMusicList:)			('set tempo to %n ticks'	-	setTempoTicks: 4)			('set tempo to %n bpm'		-	setTempoBpm: 120)			('reset tempo'					-	resetTempo)			('tempo'							r	getTempo)			('play pitch %n Hz for %n msec'	-	playPitch:msec: 440 1000)			('stop music'					-	stopMusic)			('reset music'					-	resetMusic)			-			('speaker on'					-	speakerOn)			('speaker off'					-	speakerOff)	)! !!ScratchFrameMorph methodsFor: 'microwitch' stamp: 'EiichiroIto 4/8/2021 20:00'!firmwarePathByUser	| path |	path := ScratchFileChooserDialog				chooseNewFileDefault: 'firmware.hex'				title: 'Write HEX program'				type: #hexCode.	^ path = #cancelled ifFalse: [path]! !!ScratchFrameMorph methodsFor: 'microwitch'!getMicrobitIDFrom: aString 	| s tokens |	s := (FileStream readOnlyFileNamed: aString) contentsOfEntireFile.	s lines do: 		[:each | 		tokens := each findTokens: ':'.		tokens first = 'Unique ID' ifTrue: [^ tokens second withBlanksTrimmed copyFrom: 1 to: 4]].	^ nil! !!ScratchFrameMorph methodsFor: 'microwitch' stamp: 'EiichiroIto 4/8/2021 20:26'!microbitVersionForID: aString 	aString = '9900' ifTrue: [^ #v13].	aString = '9901' ifTrue: [^ #v15].	aString = '9903' ifTrue: [^ #v20].	aString = '9904' ifTrue: [^ #v20].	^ nil! !!ScratchFrameMorph methodsFor: 'microwitch'!selectVersionByUser	| menu |	menu := CustomMenu new.	MicrobitCode firmwareVersions do: [:each | menu add: each action: each].	^ menu startUp! !!ScratchFrameMorph methodsFor: 'microwitch'!uploadFirmware	| path ver firmware id |	self stopAll.	self closeMediaEditorsAndDialogs ifFalse: [^ self].	ver := nil.	path := MicrowitchPlugin microbitDevice.	path		ifNil: 			[path := self firmwarePathByUser.			path ifNil: [^ self]]		ifNotNil: 			[id := self getMicrobitIDFrom: path , FileDirectory pathNameDelimiter asString , 'DETAILS.TXT'.			ver := self microbitVersionForID: id.			path := path , FileDirectory pathNameDelimiter asString , 'firmware.hex'].	ver ifNil: [ver := self selectVersionByUser].	firmware := MicrobitCode firmwareFor: ver.	(DialogBoxMorph ask: 'initialize micro:bit?' localized)		ifFalse: [^ self].	self writeString: firmware as: path! !ScratchFrameMorph removeSelector: #hexCodePath!ScratchFrameMorph removeSelector: #hexCodePathByPlugin!ScratchFrameMorph removeSelector: #hexCodePathByUser!ScratchFrameMorph removeSelector: #writeHexCode!ScratchFrameMorph removeSelector: #writeHexCodeAs:!MicrobitCode class removeSelector: #mainFirmware!MicrobitCode class removeSelector: #restFirmware!MicrobitCode removeSelector: #hexCodeFrom:stageMorph:!MicrobitCode readFirmware.!
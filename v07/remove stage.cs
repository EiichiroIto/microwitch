'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 31 March 2023 at 4:33:05 pm'!ScriptableScratchMorph subclass: #ScratchStageMorph	instanceVariableNames: 'zoom hPan vPan penTrailsForm lastPenPositions runningBlocks inProcessStep sensorBoard midiPortNum midiPort notePlayerDict obsoleteSavedState sprites scratchServer isQuarterSize cachedForm showMotorBlocks frameMorph '	classVariableNames: ''	poolDictionaries: ''	category: 'Scratch-Objects'!!MPBoardProcess methodsFor: 'entry points'!runStepFor: aStageMorph 	self checkConnecting.	self perform: state! !!MPBoardProcess methodsFor: 'accessing' stamp: 'EiichiroIto 3/27/2023 14:51'!frameMorph	^ frameMorph! !!MPBoardProcess methodsFor: 'accessing' stamp: 'EiichiroIto 3/27/2023 14:51'!frameMorph: aMorph	frameMorph := aMorph! !!ReporterBlockMorph methodsFor: 'other'!showValue	| gotError msg tooltip w worldBounds |	gotError _ false.	[msg _ self evaluate] ifError: [		gotError _ true.		msg _ 'Error!!'].	msg ifNil: [^ self].	msg := msg asString.	(self isBooleanReporter or: [msg = 'Error!!']) ifTrue: [		msg _ msg localized].	tooltip _ (ScratchReporterToolTipMorph string: msg for: self)		left: self right;		bottom: self top.	ScratchTranslator isRTL ifTrue: [tooltip right: self left].	gotError ifTrue: [tooltip messageColor: Color red darker].	w _ self world.	w addMorphFront: tooltip.	((worldBounds _ w bounds) containsRect: tooltip bounds) ifFalse:		[tooltip bounds: (tooltip bounds translatedToBeWithin: worldBounds)].	self setProperty: #toolTip toValue: tooltip.	tooltip initialCursorPoint: Sensor cursorPoint.	tooltip startStepping.! !!ReporterBlockMorph methodsFor: 'microwitch'!evaluate	| frame |	frame := self ownerThatIsA: ScratchFrameMorph.	frame ifNil: [^ super evaluate].	"frame mpboard isConnecting ifFalse: [^ super evaluate]."	^ frame evaluate: self! !!ScratchFrameMorph methodsFor: 'intialization'!createBasicPanes	"Create and add my palette (viewer), script editor, stage, and library panes."	topPane _ ImageFrameMorph new initFromForm: (ScratchFrameMorph skinAt: 'topPane').	viewerPane _ ScratchViewerMorph new rebuildCategorySelectors.		scriptsPane _ ScratchScriptEditorMorph new.	stageFrame _ ImageFrameMorph new initFromForm: (ScratchFrameMorph skinAt: 'stagePane').	titlePane _ ImageFrameMorph new initFromForm: (ScratchFrameMorph skinAt: 'titlePane').	workPane _ ScratchStageMorph new extent: WorkpaneExtent.	libraryPane _ ScratchLibraryMorph new.	"make panes sticky so clicking on them doesn't pick up entire frame"	self		addMorph: (topPane isSticky: true);		addMorph: (viewerPane isSticky: true);		addMorph: (scriptsPane isSticky: true);		"addMorph: (stageFrame isSticky: true);"		"addMorph: (workPane isSticky: true);"		"addMorph: (titlePane isSticky: true);"		"addMorph: (libraryPane isSticky: true);"		yourself.	self createReadoutPane.	workPane comeToFront.	workPane frameMorph: self! !!ScratchFrameMorph methodsFor: 'intialization'!createViewModeButtonsPanel	| specs bName button |	viewModeButtonsPanel := AlignmentMorph newRow		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		color: Color transparent.	viewModeButtons := OrderedCollection new.	specs := OrderedCollection new.	specs add: #(quarter			enterQuarterMode		'Switch to small stage').	specs add: #(normal			enterNormalMode		'Switch to full stage').	"specs add: #(presentation	enterPresentationMode	'Switch to presentation mode')."	specs do: [:spec |		bName := spec first.		button := ToggleButton new			onForm: (ScratchFrameMorph skinAt: bName, 'ViewModeOn')			offForm: (ScratchFrameMorph skinAt: bName, 'ViewMode')			overForm: (ScratchFrameMorph skinAt: bName, 'ViewModeOver').		button			target: self;			actionSelector: (spec at: 2);			alphaOn: true;			setProperty: #balloonText toValue: (spec at: 3) localized.		viewModeButtonsPanel			addMorphBack: button;			addMorphBack: (Morph new extent: 1@5; color: Color transparent).		viewModeButtons add: button].	"self addMorph: viewModeButtonsPanel."! !!ScratchFrameMorph methodsFor: 'menu/button actions'!step	"Run each process until it gives up control, then filter out any processes that have terminated."	| screenExtent oldJustSaved |	fillScreenFlag ifTrue: [		screenExtent _ Display extent.		((self position = (0@0)) and: [self extent = screenExtent]) ifFalse: [			oldJustSaved _ justSaved.			self position: 0@0.			self extent: screenExtent.			self enterQuarterModeIfSmallScreen.			scriptsPane currentCategory: scriptsPane currentCategory.			justSaved _ oldJustSaved.			^ self]].	workPane ifNotNil: [		ScriptableScratchMorph scratchOrigin: workPane center.		"viewerPane target isNil 			ifTrue: [self viewBlocksAndScriptsFor: workPane]			ifFalse: [viewerPane target isInWorld ifFalse: [self viewBlocksAndScriptsFor: workPane ]]"].	Sensor processOSMenuEvents.	paintingInProgress ifTrue: [^ self].	workPane scratchServer ifNotNil: [workPane scratchServer stepServer].	mpboard ifNotNil: [mpboard step].	self checkForWeDo.	self updateToolButtons.	self processWhenConditions.	self processKeyboardEvents.	workPane stepProcesses.	workPane scratchServer ifNotNil: [workPane scratchServer stepServer].	self processDroppedFiles.	workPane processesToRun size > 0		ifTrue: [flagButton on]		ifFalse: [flagButton off].! !!ScratchFrameMorph methodsFor: 'file read/write'!installNewProject: newWorkpane	"Called after creating or reading a new project to clear the process scheduler, pick an object to view, clear the library thumbnails, and perform other housekeeping."	| viewTarget sb |	self stopAll.	newWorkpane class = ScratchStageMorph		ifFalse: [^ self inform: 'Incompatible Scratch file format'].	"self exitScratchSession."	workPane scratchServer ifNotNil: [		workPane scratchServer clearCaches.		workPane scratchServer stage: newWorkpane.		newWorkpane scratchServer: workPane scratchServer].	newWorkpane isQuarterSize: workPane isQuarterSize.	newWorkpane bounds: workPane bounds.	newWorkpane midiPortNum: workPane midiPortNum.	workPane closeMIDI.	"use the same sensorboard for the new project"	sb _ workPane sensorBoard.	newWorkpane submorphs do: [:m |		(m isKindOf: SensorBoardMorph) ifTrue: [			sb position: m position.			newWorkpane replaceSubmorph: m by: sb.			sb tryToOpenPort]].	newWorkpane sensorBoard: sb.	"workPane owner replaceSubmorph: workPane by: newWorkpane."	workPane _ newWorkpane.	workPane frameMorph: self.	self fixByteReversedSounds.	"fix sprite positions (backward compatability)"	workPane submorphs do: [:m |		(m isKindOf: WatcherMorph) ifTrue: [m convertFromOldWatcher].		(m respondsTo: #costume) ifTrue: [			m position: m position + m costume rotationCenter]. "fix up positions"		m layoutChanged].	workPane layoutChanged.	"reset timer"	ScriptableScratchMorph resetTimer.	"pick an object view, or view the background if there is no other"	viewTarget _ workPane.	workPane submorphs do: [:m |		(m respondsTo: #scripts) ifTrue: [			m scripts size >= viewTarget scripts size ifTrue: [viewTarget _ m]]].	"viewTarget viewBlocksAndScripts."	self viewBlocksAndScriptsFor: viewTarget.	"populate the sprites list if it is empty (backward compatability)"	workPane sprites isEmpty ifTrue: [		workPane submorphs do: [:m |			(m isKindOf: ScriptableScratchMorph) ifTrue: [workPane sprites addLast: m]]].	scriptsPane tabPane currentTab: 'Scripts'.	libraryPane clearLibrary.	workPane clearPenTrails.	self updateProjectName.	ScratchProcess blockHighlightMSecs: 1.	ScratchPrompterMorph clearLastAnswer.	(projectInfo at: 'isHosting' ifAbsent: [false]) ifTrue: [		self enableRemoteSensors].	(projectInfo at: 'hasMotorBlocks' ifAbsent: [false]) ifTrue: [		self showMotorBlocks].	(projectInfo includesKey: 'penTrails') ifTrue: [		workPane penTrailsForm: (projectInfo at: 'penTrails')].	Clipboard _ nil.	World cleanseStepList.  "make sure garbage collect can clean up the old sprites"	Smalltalk garbageCollect.  "get rid of old sprite instances"	self world ifNotNil: [self world startSteppingSubmorphsOf: self].	ScriptableScratchMorph scratchOrigin: workPane center.	justSaved _ true.! !!ScratchFrameMorph methodsFor: 'file read/write'!writeScratchProject	"Write this Scratch project to the file named projectFile in the project directory. Called by saveScratchProject."	| oldScriptsTarget oldTab oldViewerCategory oldPosition saveError out |	self stopAll.	self world ifNotNil: [self world activeHand newKeyboardFocus: nil].  "terminates active editor"	"share duplicate sounds and images"	self canonicalizeSoundsBits: nil saveOriginal: false.	self canonicalizeImagesQuality: nil saveOriginal: false.	oldScriptsTarget _ scriptsPane target.	oldTab _ scriptsPane tabPane currentTab.	oldViewerCategory _ viewerPane currentCategory.	scriptsPane target: nil.	workPane updateSpritesList.	oldPosition _ workPane position.	workPane delete; position: 0@0.	self updatePenPositions.	ScriptableScratchMorph buildBlockSpecDictionary.	workPane allMorphsDo: [:m |		(m isKindOf: ScriptableScratchMorph) ifTrue: [			m blocksBin allMorphsDo: [:b |				(b isKindOf: BlockMorph) ifTrue: [b stop]].			m convertStacksToTuples]].	saveError _ nil.	[	out _ FileStream newFileNamed: (projectDirectory unusedNameStartingWith: 'tmp').		out			ifNil: [saveError _ 'Folder may be locked or read-only']			ifNotNil: [				out binary.				out nextPutAll: 'ScratchV02' asByteArray.				self storeProjectInfoOn: out.				ObjStream new storeObj: workPane on: out.				out close].	] ifError: [:err :rcvr |		out ifNotNil: [			[	out close.				projectDirectory deleteFileNamed: out localName.			] ifError: []].  "clean up, ignoring any errors"		saveError _ err].	workPane allMorphsDo: [:m |		(m isKindOf: ScriptableScratchMorph) ifTrue: [			m convertTuplesToStacks]].	"self addMorph: (workPane position: oldPosition)."	oldScriptsTarget ifNil: [oldScriptsTarget _ workPane].	self viewBlocksAndScriptsFor: oldScriptsTarget.	scriptsPane tabPane currentTab: oldTab.	viewerPane currentCategory: oldViewerCategory.	self updatePenPositions.	saveError		ifNil: [			justSaved _ true.			self updateProjectName.			projectDirectory deleteFileNamed: projectName.			[projectDirectory rename: out localName toBe: projectName]				ifError: [^ self inform: 'Save failed' withDetails: 'Is the folder read-only?' localized].			projectDirectory setMacFileNamed: projectName type: 'STsb' creator: 'MITS']		ifNotNil: [			projectName _ ''.			self inform: 'Save failed' withDetails: saveError].! !!ScratchFrameMorph methodsFor: 'private'!fixLayout	| stageExtent xyReadout w |	stageExtent :=		workPane isQuarterSize			ifTrue: [workPane extent // 2]			ifFalse: [workPane extent].	topPane		position: self topLeft;		width: self width;		height: (menuPanel height + 0 max: logoMorph height + 10).	stageFrame		extent: stageExtent + (14@42);		top: topPane bottom;		right: self right.	workPane position: stageFrame topLeft + (4@37).	titlePane		position: stageFrame topLeft + (0@1);		width: stageFrame width - 6;		height: 36.	self fixProjectTitleMorphLayout.	scriptsPane fixLayout.	w := (viewerPane catButtonsExtent x + 17)		within: 40		and: (self width - (scriptsPane bareMinimumWidth + stageFrame width)).	viewerPane position: topPane bottomLeft;		width: w;		height: self bottom - topPane bottom.	scriptsPane		position: viewerPane topRight;		width: self width - viewerPane width;		height: self bottom - topPane bottom;		fixLayout.	libraryPane position: stageFrame bottomLeft;		width: (self right - scriptsPane right);		height: self bottom - libraryPane top.	menuPanel		left: logoMorph right + 18;		top: topPane top + ((topPane height - menuPanel height) // 2) + 2.	viewModeButtonsPanel		right: stageFrame right - 8;		top: self top + 7.	stageButtonsPanel		position: (stageFrame left + 10)@(topPane bottom + 5);		width: stageFrame width - 28;		height: (workPane top - stageFrame top) - 8.	xyReadout := readoutPane submorphs at: 1.	readoutPane		width: xyReadout width + 23;		height: xyReadout height + 15;		position: stageFrame bottomRight - ((readoutPane width + 6)@3).	xyReadout position: readoutPane position + (18@5).	toolbarPanel		left: (stageFrame left - 4 max: menuPanel right);		top: self top + ((topPane height - toolbarPanel height) // 2) + 3."	((toolbarPanel right - 5) > viewModeButtonsPanel left)		ifTrue: [toolbarPanel delete]		ifFalse: [			(toolbarPanel owner = self) ifFalse: [				self addMorphFront: toolbarPanel]]."! !!ScratchFrameMorph methodsFor: 'private'!updatePanes	| p |	menuPanel delete.	self createMenuPanel.	toolbarPanel delete.	self createToolbar.	viewModeButtonsPanel delete.	self createViewModeButtonsPanel.	stageButtonsPanel delete.	self createStageButtonsPanel.	"titlePane addMorph: stageButtonsPanel."	scriptsPane tabPane delete.	scriptsPane createTabPane.	readoutPane delete.	self createReadoutPane.	workPane sensorBoard owner		ifNil: [p _ nil]		ifNotNil: [p _ workPane sensorBoard position].	workPane sensorBoard addReadouts.	p ifNotNil:[		self showSensorBoard.		workPane sensorBoard position: p].	libraryPane clearLibrary.	self scratchWatchers do: [:w | w languageChanged].	self listWatchers do: [:w | w fixLayoutForNewLanguage].	World startSteppingSubmorphsOf: self.	self fixLayout.	scriptsPane fixLayout.	self updateViewModeButtons.! !!ScratchFrameMorph methodsFor: 'microwitch'!viewBlocksAndScriptsFor: aScriptableScratchMorph	| editor viewer tabs |	aScriptableScratchMorph isClone ifTrue: [^ self].	editor := self scriptsPane.	viewer := self viewerPane.	tabs := editor tabPane.	self view: aScriptableScratchMorph tab: tabs currentTab category: viewer currentCategory.	aScriptableScratchMorph world ifNotNil: [		aScriptableScratchMorph zoomRectFrom: aScriptableScratchMorph bounds to: editor bounds].! !!ScratchFrameMorph class methodsFor: 'microwitch'!microwitchVersion	^ '1.3.0'! !!ScriptableScratchMorph methodsFor: 'accessing' stamp: 'EiichiroIto 3/27/2023 15:44'!frameMorph	^ owner frameMorph! !!ScriptableScratchMorph methodsFor: 'accessing' stamp: 'EiichiroIto 3/27/2023 16:10'!viewerPane	^ self workPane frameMorph viewerPane! !!ScriptableScratchMorph methodsFor: 'accessing' stamp: 'EiichiroIto 3/27/2023 16:08'!workPane	^ owner workPane! !!ScriptableScratchMorph methodsFor: 'list ops'!addGlobalList	| listName |	self frameMorph closeMediaEditorsAndDialogs.	listName := StringDialog ask: 'List name?'.	listName size = 0 ifTrue: [^ self].	self workPane createListNamed: listName.	self viewerPane categoryChanged: 'variables'! !!ScriptableScratchMorph methodsFor: 'variables'!addGlobalVariable	"Ask the user for a variable name, then add a background (global)  	variable of that name."	| varName |	self frameMorph closeMediaEditorsAndDialogs.	varName := StringDialog ask: 'Variable name?'.	varName := varName asMicroPythonIdentifier.	varName isEmpty ifTrue: [^ self].	varName first isDigit ifTrue: [varName _ 'v' , varName].	varName size > 25 ifTrue: [^ DialogBoxMorph warn: 'too long name'].	varName := varName asUTF8.	(self workPane variableNameInUse: varName)		ifTrue: [^ DialogBoxMorph warn: 'That variable name is already in use'].	self workPane addVariable: varName.	self viewerPane categoryChanged: 'variables'.	self addWatcherForNewVariable: varName withScope: self workPane! !!ScriptableScratchMorph methodsFor: 'blocks'!addGenericListBlocksTo: page y: startY	"Add the generic list blocks to the given page starting at the given y offset."	| addButton deleteButton x y hasLists stage |	addButton _ ScratchFrameMorph		buttonLabel: 'Make a list' localized		selector: #addGlobalList.	"(self isKindOf: ScratchStageMorph) ifTrue: [addButton actionSelector: #addGlobalList]."	deleteButton _ ScratchFrameMorph		buttonLabel: 'Delete a list' localized		selector: #deleteList.	x _ 13.	y _ startY + 10.	page addMorph: (addButton target: self; position: x@y).	y _ addButton bottom + 3.	hasLists _ self listVarNames size > 0.	(stage _ self ownerThatIsA: ScratchStageMorph) ifNotNil: [		stage listVarNames size > 0 ifTrue: [hasLists _ true]].	hasLists ifFalse: [^ self].	page addMorph: (deleteButton target: self; position: x@y).	y _ deleteButton bottom + 10.	y _ (self addListReportersTo: page x: x y: y) + 10.	(self blocksFor: 'list') do: [:blockOrSym |		(blockOrSym = #-) | (blockOrSym = #~)			ifTrue: [				(blockOrSym = #-) ifTrue: [y _ y + 15].	"insert a full space"				(blockOrSym = #~) ifTrue: [y _ y + 5]]	"insert a half space"			ifFalse: [				y _ self createBlock: blockOrSym atPosition: x@y onPage: page.				page submorphs last color: ScriptableScratchMorph listBlockColor]].! !!MicrobitSpriteMorph methodsFor: 'neopixel blocks'!addNeoPixel	| result pin |	result := StringDialog ask: 'pin No?'.	result size = 0 ifTrue: [^ self].	pin := result asNumberNoError asInteger.	(self ioPinInUse: pin)		ifTrue: [^ DialogBoxMorph warn: 'That pin is already in use'].	(pin between: 0 and: 15)		ifFalse: [^ DialogBoxMorph warn: 'Currently pin number is supported up to 15'].	self addNeoPixel: pin.	self viewerPane categoryChanged: 'io'! !!MicrobitSpriteMorph methodsFor: 'neopixel blocks'!deleteNeoPixel	| menu choice |	self neoPixels isEmpty ifTrue: [^ self inform: 'No NeoPixels.' localized].	menu := CustomMenu new.	self neoPixels do: [:pin | menu add: 'pin ' localized , pin asString action: pin].	choice := menu startUp.	choice ifNil: [^ self].	self deleteNeoPixel: choice.	self viewerPane categoryChanged: 'io'! !!ScratchStageMorph methodsFor: 'accessing' stamp: 'EiichiroIto 3/27/2023 15:43'!frameMorph	^ frameMorph! !!ScratchStageMorph methodsFor: 'accessing' stamp: 'EiichiroIto 3/27/2023 15:43'!frameMorph: aMorph	frameMorph := aMorph! !!ScratchStageMorph methodsFor: 'accessing' stamp: 'EiichiroIto 3/27/2023 16:08'!workPane	^ self! !!ScratchStageMorph methodsFor: 'scratch processes/events'!startProcessFor: topBlock 	"Start a process to run the given block or stack of blocks. Return the  	new process."	| sequence proc frame mpboard |	sequence := topBlock blockSequence.	sequence first isHatBlock ifTrue: [sequence := sequence allButFirst].	"skip hat block"	topBlock scratchProc ifNotNil: [topBlock stop].	(frame := topBlock ownerThatIsA: ScratchFrameMorph) ifNil: [^ nil].	mpboard := frame mpboard.	mpboard isConnecting ifFalse: [^ nil].	proc := MPBoardProcess new.	proc topBlock: topBlock;	 expression: sequence;	 frameMorph: frame.	topBlock scratchProc: proc.	(runningBlocks includes: topBlock)		ifFalse: [runningBlocks addLast: topBlock].	^ proc! !!ScratchStageMorph methodsFor: 'menus'!rightButtonMenu	"Present the right button menu."	"| menu |	menu := CustomMenu new.	menu add: 'new micro:bit sprite' action: #createNewMicrobitSprite.	menu addLine.	menu add: 'save picture of stage...' action: #stageShot.	menu localize; invokeOn: self."! !ScratchStageMorph removeSelector: #createNewMicrobitSprite!ScratchFrameMorph removeSelector: #writeScratchProjectOld!ScratchFrameMorph removeSelector: #writeScratchProjectOn:!MPBoardProcess removeSelector: #setupFrameMorph:!
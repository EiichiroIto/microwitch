'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 10 June 2022 at 5:53:26 pm'!!MicroPythonBoard methodsFor: 'commands'!write: aString fileNamed: aFilename 	| cmd tmp |	"Transcript cr; show: 'sending '; show: aFilename."	cmd := 'f = open(''' , aFilename , ''', ''w'')'.	self request: cmd.	aString lines do: 		[:each | 		tmp := each copyReplaceAll: '''' with: '\'''.		cmd := 'f.write(''' , tmp , '\n'')'.		self request: cmd].	cmd := 'f.close()'.	self request: cmd.	useRaw := false! !!MicrobitCode class methodsFor: 'initialization'!readFirmware	"MicrobitCode readFirmware."	| str dict |	dict := Dictionary new.	str := (FileStream fileNamed: 'MicroPython/firmware.hex') contentsOfEntireFile.	str isEmpty		ifFalse: 			[dict at: #v13 put: str.			dict at: #v15 put: str].	str := (FileStream fileNamed: 'MicroPython/firmware20.hex') contentsOfEntireFile.	str isEmpty		ifFalse: 			[dict at: #v20 put: str.			dict at: #v22 put: str].	Firmware := dict! !!ScratchFrameMorph methodsFor: 'menu/button actions'!aboutScratch	| dialogBox |	self closeMediaEditorsAndDialogs ifFalse: [^ self].	dialogBox _ DialogBoxMorph new title: 'About micro:witch';							withButtonsForYes: false				no: false				okay: true				cancel: false.	dialogBox message: 'micro:witch version ' , self class microwitchVersion , 'Copyright 2018-2022 Eiichiro Ito.All rights reserved.https://github.com/EiichiroIto/microwitchBased on Scratch from the MIT Media Lab, v' , Version , 'Copyright © 2009 Massachusetts Institute of Technology.All rights reserved.http://info.scratch.mit.edu/Source_Code' font: (ScratchFrameMorph getFont: #AboutScratch).	dialogBox getUserResponse! !!ScratchFrameMorph methodsFor: 'microwitch'!microbitVersionForID: aString 	aString = '9900' ifTrue: [^ #v13].	aString = '9901' ifTrue: [^ #v15].	aString = '9903' ifTrue: [^ #v20].	aString = '9904' ifTrue: [^ #v20].	aString = '9905' ifTrue: [^ #v22].	aString = '9906' ifTrue: [^ #v22].	^ nil! !!ScratchFrameMorph class methodsFor: 'microwitch' stamp: 'EiichiroIto 6/10/2022 17:16'!microwitchVersion	^ '1.2.8'! !!ScratchScriptEditorMorph methodsFor: 'private'!addReadouts	"Add readouts for my target's position and direction."	| x y label readout s sFrame |	self deleteReadouts.	readoutMorphs _ OrderedCollection new.	sFrame _ self ownerThatIsA: ScratchFrameMorph.	x _ nameMorph left.	y _ nameMorph bottom + 5.	#(('port' portName) ('status' currentStatus)) do: [:spec |		(ScratchTranslator isRTL and: [(spec at: 1) = 'x' or: [(spec at: 1) = 'y']])			ifTrue: [s _ (':', spec first) asUTF8]			ifFalse: [s _ (spec first localized, ScratchTranslator colonSuffix)].		label _ StringMorph new			contents: s;			font: (ScratchFrameMorph getFont: #XYReadout);			position: x@y.		readout _ (UpdatingStringMorph on: sFrame selector: spec second)			font: (ScratchFrameMorph getFont: #XYReadoutBold);			forceUnicodeRendering: true;			color: (Color gray: 0.2);			contents: '0000000000000000';  "this sets the readout size"			growable: false;			stepTime: 100;			position: (label right + 4)@y.		ScratchTranslator isRTL ifTrue:[			readout rightJustify: true].		self addMorph: label; addMorph: readout.		readoutMorphs add: label; add: readout.		readout startStepping.		x _ readout right + 2].	ScratchTranslator isRTL ifTrue: [		readoutMorphs reversed do: [: m |			readoutMorphs remove: m.			readoutMorphs add: m]].	penReadout _ Morph new extent: 15@5.	penReadout position: (lockButton right + 4)@(nameMorph top + ((nameMorph height - penReadout height) / 2));		color: Color transparent.	self addMorph: penReadout.	readoutMorphs add: penReadout.	penReadout startStepping.	readoutMorphs _ readoutMorphs asArray.! !
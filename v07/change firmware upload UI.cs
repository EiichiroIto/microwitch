'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 29 March 2021 at 12:52:30 pm'!DialogBoxMorph subclass: #MultilineTextDialog	instanceVariableNames: 'scratchFrame commentMorph '	classVariableNames: ''	poolDictionaries: ''	category: 'Microwitch-Objects'!!MicroPythonBoard methodsFor: 'private'!sendRequestUsingPasteMode	(port nextPut: 5)		= 0 ifTrue: [^ self closePort].	'sending ...' localized		displayProgressAt: Display boundingBox center		with: requests		during: 			[:each | 			port nextPutAll: each.			port nextPut: 13.			(Delay forMilliseconds: 100) wait.			self processIncomingMessages].	(port nextPut: 4)		= 0 ifTrue: [^ self closePort]! !!MicroPythonBoard methodsFor: 'private'!sendRequestUsingRawMode	'sending ...' localized		displayProgressAt: Display boundingBox center		with: requests		during: 			[:each | 			(port nextPut: 1)				= 0 ifTrue: [^ self closePort].			port nextPutAll: each.			port nextPut: 13.			(port nextPut: 4)				= 0 ifTrue: [^ self closePort].			(Delay forMilliseconds: 100) wait.			port flushInputBuffer].	(port nextPut: 2)		= 0 ifTrue: [^ self closePort]! !!MultilineTextDialog methodsFor: 'initialization'!createDialogFor: aString 	"Create a Scratch project notes dialog box."	| commentFont |	commentFont := ScratchFrameMorph getFont: #ProjectNotes.	commentMorph := ScrollingStringMorph new borderWidth: 0;			 contents: '';			 font: commentFont;			 backForm: (ScratchFrameMorph skinAt: #stringFieldFrame);			 width: 500.	self title: 'Project Notes'.	mainColumn addMorphBack: commentMorph.	mainColumn addMorphBack: buttonRow.	commentMorph contents: aString.	bottomSpacer delete.	bottomSpacer := nil.	tabFields add: commentMorph! !!MultilineTextDialog methodsFor: 'initialization' stamp: 'EiichiroIto 3/26/2021 10:49'!initialize	super initialize.	self withButtonsForYes: false no: false okay: true cancel: true.! !!MultilineTextDialog methodsFor: 'other' stamp: 'EiichiroIto 3/26/2021 10:49'!comment	^ commentMorph contents! !!MultilineTextDialog methodsFor: 'other'!getUserResponse	"Wait for the user to respond, then answer #ok if the okay button was 	pressed or #cancelled if the user cancels the operation."	"Details: This is invoked synchronously from the caller. In order to keep 	processing inputs and updating the screen while waiting for the user to 	respond, this method has its own version of the World's event loop."	| w |	self openInWorld.	self centerOnScreen.	w := self world.	w activeHand newKeyboardFocus: commentMorph.	done := false.	[done]		whileFalse: [w doOneCycle].	response = #cancelled ifTrue: [^ #cancelled].	^ #ok! !!MultilineTextDialog class methodsFor: 'instance creation'!editFor: aString 	"Choose a name for sharing the current Scratch project file. Display the 	project thumbnail and info string and allow the info string to be edited. 	Answer the new project name."	^ self new createDialogFor: aString;	 extent: 550 @ 450! !!ScratchFrameMorph methodsFor: 'intialization'!createStageButtonsPanel	"Create and add a panel containing the project title, green flag, and stop buttons."	| buttonSpecs bName button |	"create panel"	stageButtonsPanel := AlignmentMorph new		color: Color transparent;		centering: #center;		height: 20.	projectTitleMorph := StringMorph new		forceUnicodeRendering: true;		contents: '';		font: (ScratchFrameMorph getFont: #FrameMorphProjectTitle).	stageButtonsPanel		addMorphBack: projectTitleMorph;		addMorphBack: (AlignmentMorph newSpacer: Color transparent).	"buttonSpecs defines the toolbar buttons; first is icon name, second is selector"	buttonSpecs := #(		"name	selector		tool tip"		(go		shoutGo		'Start green flag scripts')		(stop	stopAll		'Stop everything')		(send	sendMicroPythonScript	'Send to micro:bit')).	buttonSpecs do: [:spec |		bName := spec first.		button := ToggleButton			onForm: (ScratchFrameMorph skinAt: (bName, 'ButtonGrayPressed') asSymbol)			offForm: (ScratchFrameMorph skinAt: (bName, 'ButtonGray') asSymbol)			overForm: (ScratchFrameMorph skinAt: (bName, 'ButtonGrayPressed') asSymbol).		button			target: self;			actionSelector: (spec at: 2);			isMomentary: true;			setProperty: #balloonText toValue: (spec at: 3) localized.		stageButtonsPanel addMorphBack: button.		bName = #go ifTrue: [			flagButton := button.			stageButtonsPanel addMorphBack: (Morph new color: Color transparent; extent: 2@5)]].	titlePane addMorph: stageButtonsPanel.! !!ScratchFrameMorph methodsFor: 'menu/button actions'!fileMenu: aMenuTitleMorph	| menu |	menu := CustomMenu new.	menu add: 'New' action: #newScratchProject.	menu add: 'Open' action: #openScratchProject.	menu add: 'Save' action: #saveScratchProjectNoDialog.	menu add: 'Save As' action: #saveScratchProject.	menu addLine.	menu add: 'Write Python program' action: #writePythonProgram.	"menu add: 'Write HEX program' action: #writeHexCode."	Sensor shiftPressed ifTrue: [  "developer menu"		menu addLine.		fillScreenFlag			ifTrue: [				menu add: 'Exit User Mode' action: #fillScreenOff]			ifFalse: [				menu add: 'Enter User Mode' action: #fillScreenOn.				menu add: 'Save Image in User Mode' action: #saveImageForEndUser]].	menu addLine.	menu add: 'Quit' action: #quitScratch.	menu localize.		#(2 4 "5 6 7") do: [:n |		menu labels at: n put:			((menu labels at: n) copyFrom: 1 to: (menu labels at: n) size - 1), ScratchTranslator ellipsesSuffix].	menu invokeOn: self at: aMenuTitleMorph bottomLeft + (0@10).! !!ScratchFrameMorph methodsFor: 'microwitch'!microbitMenu: aMenuTitleMorph 	| menu |	menu := CustomMenu new.	mpboard isConnecting		ifTrue: 			[menu add: 'Send to micro:bit' action: #sendMicroPythonScript.			menu add: 'Disconnect from micro:bit' action: #disconnectMicrobit]		ifFalse: [menu add: 'Connect to micro:bit' action: #connectMicrobit].	menu addLine.	menu add: 'initialize micro:bit' action: #uploadFirmware.	menu add: 'show python code' action: #showPythonProgram.	Sensor shiftPressed		ifTrue: 			[menu addLine.			menu add: 'inspect' action: #inspect.			menu add: 'update firmware' action: #updateFirmware].	menu addLine.	menu add: 'About micro:witch' action: #aboutScratch.	menu localize.	menu invokeOn: self at: aMenuTitleMorph bottomLeft + (0 @ 10)! !!ScratchFrameMorph methodsFor: 'microwitch'!sendMicroPythonScript	| script code |	self currentHatBlocks isEmpty ifTrue: [^ self].	self hasDuplicateHatBlocks ifTrue: [^ DialogBoxMorph inform: 'has duplicate hat blocks.' localized].	mpboard isConnecting ifFalse: [^ DialogBoxMorph inform: 'connect before send' localized].	self stopAll.	code := MicrobitCode new newlineCR.	script := code pythonScriptFrom: self currentHatBlocks stageMorph: workPane.	self uploadExternalModules: code externalModules.	mpboard write: script fileNamed: 'main.py'.	mpboard reboot! !!ScratchFrameMorph methodsFor: 'microwitch'!showPythonProgram	| dialog script |	self hasDuplicateHatBlocks ifTrue: [^ DialogBoxMorph inform: 'has duplicate hat blocks.' localized].	script := MicrobitCode new pythonScriptFrom: self currentHatBlocks stageMorph: workPane.	dialog := MultilineTextDialog editFor: script.	dialog getUserResponse! !!ScratchFrameMorph methodsFor: 'microwitch'!uploadFirmware	| s path |	self stopAll.	s := WriteStream on: String new.	s nextPutAll: MicrobitCode mainFirmware.	s nextPutAll: MicrobitCode restFirmware.	path := self hexCodePath.	path ifNil: [^ self].	(DialogBoxMorph ask: 'initialize micro:bit?' localized)		ifFalse: [^ self].	self writeString: s contents as: path! !!String methodsFor: 'microwitch'!displayProgressAt: aPoint with: aCollection during: aBlock 	self		displayProgressAt: aPoint		from: 0		to: aCollection size		during: 			[:bar | 			bar value: 0.			1 to: aCollection size do: 				[:index | 				aBlock value: (aCollection at: index).				bar value: index]]! !ScratchFrameMorph removeSelector: #addMicrobitCommandsTo:!ScratchFrameMorph removeSelector: #sendMicrobit!
'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 15 April 2021 at 9:25:30 pm'!Object subclass: #MicroPythonBoard	instanceVariableNames: 'port portName currentState response count requests returnValue interrupt useRaw '	classVariableNames: 'PasteModeString PromptString UseAllPorts '	poolDictionaries: ''	category: 'MicroPython-Board'!!MicroPythonBoard methodsFor: 'private'!hardwareIdFrom: aString 	| index vid pid |	index := aString findString: 'VID_'.	vid := index > 0 ifTrue: [aString copyFrom: index + 4 to: index + 7].	index := aString findString: 'PID_'.	pid := index > 0 ifTrue: [aString copyFrom: index + 4 to: index + 7].	^ Array with: vid with: pid! !!MicroPythonBoard methodsFor: 'serial port'!winPortNames	| str list info |	str := MicrowitchPlugin enumerateComPorts.	str ifNil: [^ #()].	list := OrderedCollection new.	str lines		pairsDo: 			[:portname :each | 			info := self hardwareIdFrom: each.			(self class useAllPorts				or: [info first = '0D28' and: [info second = '0204']])				ifTrue: [list add: portname]].	^ list asArray! !!MicroPythonBoard class methodsFor: 'accessing' stamp: 'EiichiroIto 4/13/2021 17:20'!useAllPorts	^ UseAllPorts! !!MicroPythonBoard class methodsFor: 'accessing' stamp: 'EiichiroIto 4/13/2021 17:21'!useAllPorts: aBoolean	UseAllPorts := aBoolean! !!MicroPythonBoard class methodsFor: 'class initialization' stamp: 'EiichiroIto 4/13/2021 17:20'!initialize	UseAllPorts := false! !!MicrobitCode class methodsFor: 'accessing'!firmwareFor: aSymbol 	^ Firmware at: aSymbol ifAbsent: []! !!ScratchFrameMorph methodsFor: 'startup'!processSettingsFile	"Process settings from the Scratch.ini file."	| lang settings k |	self class setVisibleDrives: nil.	lang := nil.	ScratchFileChooserDialog clearFolderCache.	"clear homeDir and last folder cache"	settings := self readSettingsFile.	settings		associationsDo: 			[:assoc | 			k := assoc key.			k = 'allports' ifTrue: [MicroPythonBoard useAllPorts: assoc value asNumberNoError > 0].			k = 'language' ifTrue: [lang := assoc value].			k = 'home' ifTrue: [ScratchFileChooserDialog setHomeDir: assoc value].			k = 'visibledrives' ifTrue: [self class setVisibleDrives: assoc value]].	lang ifNil: [lang := ScratchTranslator guessLanguage].	self setLanguage: lang! !!ScratchFrameMorph methodsFor: 'microwitch'!connectMicrobit	| list menu selection path ver id firmware |	list := mpboard portNames sort.	list isEmpty ifTrue: [^ DialogBoxMorph inform: 'no micro:bit found' localized].	list size = 1		ifTrue: [selection := list first]		ifFalse: 			[menu := CustomMenu new.			list do: [:each | menu add: each action: each].			selection := menu startUp.			selection ifNil: [^ self]].	self connectPort: selection ifConnectedDo: [^ self].	path := MicrowitchPlugin microbitDevice.	path ifNil: [^ DialogBoxMorph inform: 'no micro:bit found' localized].	id := self getMicrobitIDFrom: path , FileDirectory pathNameDelimiter asString , 'DETAILS.TXT'.	ver := self microbitVersionForID: id.	path := path , FileDirectory pathNameDelimiter asString , 'firmware.hex'.	firmware := MicrobitCode firmwareFor: ver.	firmware ifNil: [^ DialogBoxMorph inform: 'unable to find the appropriate firmware' localized].	self writeString: firmware as: path.	DialogBoxMorph inform: 'initializing micro:bit done, please re-send scripts' localized! !!ScratchFrameMorph methodsFor: 'microwitch'!connectPort: aString ifConnectedDo: aBlock 	| timeout |	mpboard closePort.	mpboard openPort: aString.	mpboard stop.	timeout := Time millisecondClockValue + 1000.	[Time millisecondClockValue > timeout]		whileFalse: 			[mpboard step.			mpboard isReady ifTrue: aBlock.			(Delay forMilliseconds: 10) wait].	mpboard closePort! !!ScratchFrameMorph methodsFor: 'microwitch'!microbitMenu: aMenuTitleMorph 	| menu |	menu := CustomMenu new.	menu add: 'Send to micro:bit' action: #sendMicroPythonScript.	mpboard isConnecting		ifTrue: [menu add: 'Disconnect from micro:bit' action: #disconnectMicrobit]		ifFalse: [menu add: 'Connect to micro:bit' action: #connectMicrobit].	menu addLine.	menu add: 'initialize micro:bit' action: #uploadFirmware.	menu add: 'show python code' action: #showPythonProgram.	Sensor shiftPressed		ifTrue: 			[menu addLine.			menu add: 'inspect' action: #inspect.			menu add: 'update firmware' action: #updateFirmware].	menu addLine.	menu add: 'About micro:witch' action: #aboutScratch.	menu localize.	menu invokeOn: self at: aMenuTitleMorph bottomLeft + (0 @ 10)! !!ScratchFrameMorph methodsFor: 'microwitch'!sendMicroPythonScript	| script code |	self currentHatBlocks isEmpty ifTrue: [^ self].	self hasDuplicateHatBlocks ifTrue: [^ DialogBoxMorph inform: 'has duplicate hat blocks.' localized].	mpboard isConnecting ifFalse: [self connectMicrobit].	mpboard isConnecting ifFalse: [^ self].	self stopAll.	code := MicrobitCode new newlineCR.	script := code pythonScriptFrom: self currentHatBlocks stageMorph: workPane.	self uploadExternalModules: code externalModules.	mpboard write: script fileNamed: 'main.py'.	mpboard reboot! !!ScratchFrameMorph methodsFor: 'microwitch'!uploadFirmware	| path ver id firmware |	self stopAll.	self closeMediaEditorsAndDialogs ifFalse: [^ self].	ver := nil.	path := MicrowitchPlugin microbitDevice.	path		ifNil: 			[path := self firmwarePathByUser.			path ifNil: [^ self].			ver := self selectVersionByUser.			ver ifNil: [^ self]]		ifNotNil: 			[id := self getMicrobitIDFrom: path , FileDirectory pathNameDelimiter asString , 'DETAILS.TXT'.			ver := self microbitVersionForID: id.			path := path , FileDirectory pathNameDelimiter asString , 'firmware.hex'].	firmware := MicrobitCode firmwareFor: ver.	firmware ifNil: [^ DialogBoxMorph inform: 'unable to find the appropriate firmware' localized].	(DialogBoxMorph ask: 'initialize micro:bit?' localized)		ifFalse: [^ self].	self writeString: firmware as: path! !!MicroPythonBoard class reorganize!('private' defaultBaudRate defaultTimeout reset)('accessing' pasteModeString promptString useAllPorts useAllPorts:)('class initialization' initialize)!MicroPythonBoard initialize.!
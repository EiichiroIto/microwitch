'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 29 March 2021 at 12:52:49 pm'!!EventTitleMorph methodsFor: 'event handling'!presentMenu	"Pop up a menu of choices."	| eventNames sFrame menu choice |	eventNames := #().	(sFrame := self ownerThatIsA: ScratchFrameMorph) ifNotNil: [eventNames _ sFrame workPane allEventNames].	menu := CustomMenu new.	eventNames do: [:n | menu add: n action: n asString].	menu addLine.	menu add: 'new' localized , ScratchTranslator ellipsesSuffix action: #newEvent.	(choice := menu startUp) ifNil: [^ self].	choice == #newEvent ifTrue: [^ self addSubroutine].	self eventName: choice! !!EventTitleMorph methodsFor: 'microwitch'!addSubroutine	| s sFrame |	sFrame := self ownerThatIsA: ScratchFrameMorph.	sFrame ifNil: [^ self].	sFrame closeMediaEditorsAndDialogs.	s := StringDialog ask: 'Subroutine name:'.	s := s asMicroPythonIdentifier.	s isEmpty ifTrue: [^ self].	s size > 25 ifTrue: [^ DialogBoxMorph warn: 'too long name'].	self eventName: s! !!ScratchFrameMorph methodsFor: 'other'!closeMediaEditorsAndDialogs	"Close any open paint or sound editors, asking the user first to avoid losing edits. Answer true if all are closed."	| mList mHasCancel |	mList _ PaintFrame allInstances select: [:m | m isInWorld].	mList size > 0 ifTrue: [		(DialogBoxMorph ask: 'Close paint editor?') ifFalse: [^ false].		mList do: [:m | m cancelled; delete].		paintingInProgress _ false].	mList _ ScratchSoundRecorderDialogMorph allInstances select: [:m | m isInWorld].	mList size > 0 ifTrue: [		(DialogBoxMorph ask: 'Close sound recorder?') ifFalse: [^ false].		mList do: [:m | m cancelled; delete]].	mList _ DialogBoxMorph allInstances select: [:m | m isInWorld].	mList size > 0 ifTrue: [		"(DialogBoxMorph ask: 'Close dialog?') ifFalse: [^ false]."		mList do: [:m |			mHasCancel _ false.			m buttons do: [:b |				b action = #cancelled ifTrue: [mHasCancel _ true]].			mHasCancel				ifTrue: [m cancelled; delete]				ifFalse: [m no; delete]]].	DialogBoxMorph subclassesDo: [:c |		mList _ c allInstances select: [:m | m isInWorld].		mList size > 0 ifTrue: [			"(DialogBoxMorph ask: 'Close dialog?') ifFalse: [^ false]."			mList do: [:m |				mHasCancel _ false.				m buttons do: [:b |					b action = #cancelled ifTrue: [mHasCancel _ true]].				mHasCancel					ifTrue: [m cancelled; delete]					ifFalse: [m no; delete]]]].	"subclass of a subclass of DialogBoxMorph"	mList _ NewVariableDialog allInstances select: [:m | m isInWorld].	mList size > 0 ifTrue: [		"(DialogBoxMorph ask: 'Close dialog?') ifFalse: [^ false]."		mList do: [:m | m cancelled; delete]].	^ true! !!ScriptableScratchMorph methodsFor: 'list ops'!addGlobalList	| sFrame listName |	(sFrame := self ownerThatIsA: ScratchFrameMorph) ifNil: [^ self beep].	sFrame closeMediaEditorsAndDialogs.	listName := StringDialog ask: 'List name?'.	listName size = 0 ifTrue: [^ self].	sFrame workPane createListNamed: listName.	sFrame viewerPane categoryChanged: 'variables'! !!ScriptableScratchMorph methodsFor: 'list ops'!addList	| sFrame result listName |	(sFrame := self ownerThatIsA: ScratchFrameMorph) ifNil: [^ self beep].	sFrame closeMediaEditorsAndDialogs.	result := NewVariableDialog ask: 'List name?'.	result = #cancelled ifTrue: [^ self].	listName := result first.	result second		ifTrue: [self createListNamed: listName]		ifFalse: [sFrame workPane createListNamed: listName].	sFrame viewerPane categoryChanged: 'variables'! !!ScriptableScratchMorph methodsFor: 'variables'!addGlobalVariable	"Ask the user for a variable name, then add a background (global)  	variable of that name."	| sFrame varName |	(sFrame := self ownerThatIsA: ScratchFrameMorph) ifNil: [^ self beep].	sFrame closeMediaEditorsAndDialogs.	varName := StringDialog ask: 'Variable name?'.	varName := varName asMicroPythonIdentifier.	varName isEmpty ifTrue: [^ self].	varName first isDigit ifTrue: [varName := 'v' , varName].	varName size > 25 ifTrue: [^ DialogBoxMorph warn: 'too long name'].	varName := varName asUTF8.	(sFrame workPane variableNameInUse: varName)		ifTrue: 			[self beep.			DialogBoxMorph warn: 'That variable name is already in use'.			^ self].	sFrame workPane addVariable: varName.	sFrame viewerPane categoryChanged: 'variables'.	self addWatcherForNewVariable: varName withScope: sFrame workPane! !
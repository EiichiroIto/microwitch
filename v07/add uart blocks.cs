'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 18 June 2020 at 2:55:31 pm'!MicrobitModule subclass: #ModuleObject	instanceVariableNames: 'objectName '	classVariableNames: ''	poolDictionaries: ''	category: 'Microwitch-Translator'!!MicrobitCode methodsFor: 'private' stamp: 'EiichiroIto 6/18/2020 14:01'!useUart	modules add: MicrobitModule uart.! !!MicrobitCode methodsFor: 'comm blocks'!uartInitBaud: aMorph	| str |	self useUart.	stream nextPutAll: 'uart.init('.	str := aMorph blockArgs first argString: generator.	stream nextPutAll: str.	stream nextPutAll: ')'! !!MicrobitCode methodsFor: 'comm blocks'!uartInitBaudtxrx: aMorph 	| str |	self useUart.	stream nextPutAll: 'uart.init(baudrate='.	str := aMorph blockArgs first argString: generator.	stream nextPutAll: str.	stream nextPutAll: ',tx='.	self generatePin: aMorph blockArgs second.	stream nextPutAll: ',rx='.	self generatePin: aMorph blockArgs third.	stream nextPutAll: ')'! !!MicrobitCode methodsFor: 'comm blocks' stamp: 'EiichiroIto 6/18/2020 13:56'!uartRead: aMorph	self useUart.	^ 'uart.read()'! !!MicrobitCode methodsFor: 'comm blocks' stamp: 'EiichiroIto 6/18/2020 13:56'!uartReadLine: aMorph	self useUart.	^ 'uart.readline()'! !!MicrobitCode methodsFor: 'comm blocks'!uartWrite: aMorph	| str |	self useUart.	stream nextPutAll: 'uart.write('.	str := aMorph blockArgs first argString: generator.	stream nextPutAll: str.	stream nextPutAll: ')'! !!MicrobitCode methodsFor: 'comm blocks'!uartWriteLine: aMorph	| str |	self useUart.	stream nextPutAll: 'uart.write('.	str := aMorph blockArgs first argString: generator.	stream nextPutAll: str.	stream nextPutAll: '+''\r'')'! !!MicrobitModule class methodsFor: 'instance creation'!uart	^ ModuleObject new moduleName: #microbit;	 objectName: #uart;	 yourself! !!MicrobitSpriteMorph methodsFor: 'comm ops' stamp: 'EiichiroIto 6/18/2020 13:47'!uartInitBaud: anInteger	! !!MicrobitSpriteMorph methodsFor: 'comm ops' stamp: 'EiichiroIto 6/18/2020 13:48'!uartInitBaud: anInteger tx: txPort rx: rxPort	! !!MicrobitSpriteMorph methodsFor: 'comm ops' stamp: 'EiichiroIto 6/18/2020 13:49'!uartRead	^ 'hello'! !!MicrobitSpriteMorph methodsFor: 'comm ops' stamp: 'EiichiroIto 6/18/2020 13:48'!uartReadLine	^ 'hello', String cr! !!MicrobitSpriteMorph methodsFor: 'comm ops' stamp: 'EiichiroIto 6/18/2020 13:49'!uartWrite: aString	! !!MicrobitSpriteMorph methodsFor: 'comm ops'!uartWriteLine: aString	! !!MicrobitSpriteMorph class methodsFor: 'block specs'!commBlocks	^ #(		'comm'			('radio on'								-	onRadio)			('radio off'								-	offRadio)			('config radio group %n'			-	configRadioGroup:	0)			('send a radio message %s'		-	sendRadio:	'Hello!!')			('received radio message'			r	receiveRadio)			('radio reset'							-	resetRadio)			-			('uart init baud %n'					-	uartInitBaud:	115200)			('uart init baud %n tx %n rx %n'					-	uartInitBaud:tx:rx:	115200 0 1)			('uart read'								r	uartRead)			('uart read line'						r	uartReadLine)			('uart write %s'						-	uartWrite:		'hello')	)! !!ModuleObject methodsFor: 'accessing' stamp: 'EiichiroIto 6/18/2020 14:15'!objectName	^ objectName! !!ModuleObject methodsFor: 'accessing' stamp: 'EiichiroIto 6/18/2020 14:15'!objectName: aString	objectName := aString! !!ModuleObject methodsFor: 'comparing' stamp: 'EiichiroIto 6/18/2020 14:16'!= other 	self == other ifTrue: [^ true].	self class == other class ifFalse: [^ false].	^ moduleName = other moduleName and: [objectName = other objectName]! !!ModuleObject methodsFor: 'comparing' stamp: 'EiichiroIto 6/18/2020 14:17'!hash	^ (moduleName , '-' , objectName) hash! !!ModuleObject methodsFor: 'private'!generatedCodes	^ {'from ' , moduleName , ' import ' , objectName}! !!ModuleObject methodsFor: 'printing' stamp: 'EiichiroIto 6/18/2020 14:17'!printOn: aStream 	aStream nextPutAll: self class name;	 nextPut: $(;	 nextPutAll: moduleName asString;	 nextPut: $,;	 nextPutAll: objectName asString;	 nextPut: $)! !
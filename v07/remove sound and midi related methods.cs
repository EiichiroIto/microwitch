'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 22 April 2023 at 5:50:06 pm'!!ChoiceArgMorph methodsFor: 'accessing'!choice: aSymbol	"Update the toggle button when an argument is changed within a block."	| frame palette block doLocalization label |	frame _ self ownerThatIsA: ScratchFrameMorph.	"((#soundNames = getOptionsSelector) and:	 [aSymbol = ('record' localized, ScratchTranslator ellipsesSuffix)]) ifTrue: [		frame ifNotNil: [^ frame newSound]]."	((#sceneNames = getOptionsSelector) and:	 [aSymbol = ('record' localized, ScratchTranslator ellipsesSuffix)]) ifTrue: [		frame ifNotNil: [^ frame workPane newScene]].	((#sceneNames = getOptionsSelector) and:	 [aSymbol = ('re-record' localized, ScratchTranslator ellipsesSuffix)]) ifTrue: [		frame ifNotNil: [^ frame workPane rerecordScene]].	choice _ label _ aSymbol.	label isUnicode ifFalse: [label _ label asString].	doLocalization _ (#(costumeNames "soundNames" varNamesMenu listVarMenu) includes: getOptionsSelector) not.	doLocalization & label isUnicode not		ifTrue:[labelMorph contents: label localized]		ifFalse:[labelMorph contents: label].	labelMorph position: self position + borderWidth + (3 @ -1).	self extent: (labelMorph extent + (16@2) + borderWidth).	menuIconMorph position: (self right - borderWidth - 10)@(self top + borderWidth + 4).	(block _ self ownerThatIsA: HatBlockMorph) ifNotNil: [		block fixBlockLayout].	(palette _ self ownerThatIsA: ScratchBlockPaletteMorph) ifNil: [^ self].	(block _ self ownerThatIsA: BlockMorph) ifNil: [^ self].	block isReporter ifTrue: [palette updateWatcherButtonsForFrame: frame].! !!ChoiceArgMorph methodsFor: 'accessing'!presentMenu	"Pop up a menu of choices."	| optionList doLocalization menu selection option |	optionList _ self options.	optionList size = 0 ifTrue: [^ self].	doLocalization _ (#(costumeNames "soundNames" varNamesMenu listVarMenu) includes: getOptionsSelector) not.	menu _ CustomMenu new.	optionList do: [:sym |		'-' = sym			ifTrue: [menu addLine]			ifFalse: [				doLocalization & sym isUnicode not					ifTrue: [option _ sym localized asUTF8]					ifFalse: [option _ sym].				((#(hookupSensorNames hookupBooleanSensorNames) includes: getOptionsSelector) and:				 [(#(connected resistance) includes: sym)])					ifTrue: [#(A B C D) do: [:c |						self owner isBooleanReporter							ifFalse: [menu add: (option, '-', c) action: (sym, '-', c)]							ifTrue: [menu add: (c asUTF8, ' ', option) action: (c, ' ' ,sym)]]]					ifFalse: [menu add: option action: sym]]].	(selection _ menu startUp) ifNotNil: [self choice: selection].! !!CommandBlockMorph methodsFor: 'evaluation'!coerceArgs: argList	"Answer an arugments array in which all arguments that should be numbers have been coerced to numbers if necessary."	| args specialCommands numFlags |	args := argList asArray.	specialCommands := #(		append:toList: deleteLine:ofList: getLine:ofList: insert:at:ofList: list:contains: setLine:ofList:to:		lookLike: showBackground:		"playSound: doPlaySoundAndWait"		setVar:to: scrollAndWait animateAndWait).	(specialCommands includes: selector) ifFalse: [		"ensure args are numbers where numbers are expected"		numFlags := self numberArgFlags.		1 to: args size do: [:i |			(numFlags at: i) ifTrue: [args at: i put: (args at: i) asNumberNoError]]].	^ args! !!ScratchFrameMorph methodsFor: 'file read/write'!installNewProject: newWorkpane	"Called after creating or reading a new project to clear the process scheduler, pick an object to view, clear the library thumbnails, and perform other housekeeping."	| viewTarget sb |	self stopAll.	newWorkpane class = ScratchStageMorph		ifFalse: [^ self inform: 'Incompatible Scratch file format'].	"self exitScratchSession."	workPane scratchServer ifNotNil: [		workPane scratchServer clearCaches.		workPane scratchServer stage: newWorkpane.		newWorkpane scratchServer: workPane scratchServer].	newWorkpane isQuarterSize: workPane isQuarterSize.	newWorkpane bounds: workPane bounds.	"newWorkpane midiPortNum: workPane midiPortNum.	workPane closeMIDI."	"use the same sensorboard for the new project"	sb _ workPane sensorBoard.	newWorkpane submorphs do: [:m |		(m isKindOf: SensorBoardMorph) ifTrue: [			sb position: m position.			newWorkpane replaceSubmorph: m by: sb.			sb tryToOpenPort]].	newWorkpane sensorBoard: sb.	"workPane owner replaceSubmorph: workPane by: newWorkpane."	workPane _ newWorkpane.	workPane frameMorph: self.	self fixByteReversedSounds.	"fix sprite positions (backward compatability)"	workPane submorphs do: [:m |		(m isKindOf: WatcherMorph) ifTrue: [m convertFromOldWatcher].		(m respondsTo: #costume) ifTrue: [			m position: m position + m costume rotationCenter]. "fix up positions"		m layoutChanged].	workPane layoutChanged.	"reset timer"	ScriptableScratchMorph resetTimer.	"pick an object view, or view the background if there is no other"	viewTarget _ workPane.	workPane submorphs do: [:m |		(m respondsTo: #scripts) ifTrue: [			m scripts size >= viewTarget scripts size ifTrue: [viewTarget _ m]]].	"viewTarget viewBlocksAndScripts."	self viewBlocksAndScriptsFor: viewTarget.	"populate the sprites list if it is empty (backward compatability)"	workPane sprites isEmpty ifTrue: [		workPane submorphs do: [:m |			(m isKindOf: ScriptableScratchMorph) ifTrue: [workPane sprites addLast: m]]].	scriptsPane tabPane currentTab: 'Scripts'.	libraryPane clearLibrary.	workPane clearPenTrails.	self updateProjectName.	ScratchProcess blockHighlightMSecs: 1.	ScratchPrompterMorph clearLastAnswer.	(projectInfo at: 'isHosting' ifAbsent: [false]) ifTrue: [		self enableRemoteSensors].	(projectInfo at: 'hasMotorBlocks' ifAbsent: [false]) ifTrue: [		self showMotorBlocks].	(projectInfo includesKey: 'penTrails') ifTrue: [		workPane penTrailsForm: (projectInfo at: 'penTrails')].	Clipboard _ nil.	World cleanseStepList.  "make sure garbage collect can clean up the old sprites"	Smalltalk garbageCollect.  "get rid of old sprite instances"	self world ifNotNil: [self world startSteppingSubmorphsOf: self].	ScriptableScratchMorph scratchOrigin: workPane center.	justSaved _ true.! !!ScratchProcess methodsFor: 'private-evaluation'!applyTimedCommand	"Applies the current command to the already evaluated list of arguments over a particular time interval."	| block arguments currentTime startTime args totalMSecs elapsedMSecs |	block _ stackFrame expression.	arguments _ stackFrame arguments.	"Do we still need to evaluate more arguments?"	arguments size < block argumentCount ifTrue: [^ self evaluateNextArgument].	arguments _ block coerceArgs: arguments.	"Record or get the time when command was first invoked."	currentTime _ Time millisecondClockValue.	startTime _ stackFrame startTime.	startTime ifNil: [  "first call; just set starting time and value"		args _ arguments asArray, (Array with: 0 with: nil).		stackFrame startValue: (block receiver perform: block selector withArguments: args).		stackFrame startTime: currentTime.		readyToYield _ true.		^ self].	"Call primitive time command with its arguments and the elapsed time in seconds"	totalMSecs _ arguments last * 1000.	block selector = #glideSecs:toX:y:elapsed:from: ifTrue: [totalMSecs _ arguments first * 1000].	block selector = #mwait:elapsed:from: ifTrue: [totalMSecs _ arguments last].	"((block selector = #drum:duration:elapsed:from:) or:	 [block selector = #noteOn:duration:elapsed:from:])		ifTrue: [totalMSecs _ (60000 * arguments second) / block receiver tempo].	block selector = #rest:elapsed:from:		ifTrue: [totalMSecs _ (60000 * arguments first) / block receiver tempo]."	elapsedMSecs _ currentTime - startTime.	currentTime < startTime ifTrue: [elapsedMSecs _ totalMSecs].  "clock wrap"	args _ arguments asArray, (Array with: elapsedMSecs with: stackFrame startValue).	block receiver perform: block selector withArguments: args.	"If not done, then we leave stack as is and yield."	elapsedMSecs < totalMSecs ifTrue: [		readyToYield _ true.		^ self].	"Pop this command off the stack and return."	self popStackFrame.! !!ScratchScriptEditorMorph methodsFor: 'accessing'!currentCategory: aString	| xOffset |	currentCategory _ aString.	self target ifNil: [^ self].	xOffset _ 0.	World activeHand newKeyboardFocus: nil.	currentCategory = 'Scripts' ifTrue: [		pageViewerMorph contents: self target blocksBin].	currentCategory = 'Costumes' ifTrue: [		pageViewerMorph contents: (self target costumesPage: xOffset)].	"currentCategory = 'Sounds' ifTrue: [		pageViewerMorph contents: (self target soundsPage: xOffset)]."	pageViewerMorph contents color: ScratchFrameMorph scriptsPaneColor.	self world ifNotNil: [self world startSteppingSubmorphsOf: pageViewerMorph contents].! !!ScratchThread class methodsFor: 'class initialization'!initialize	"self initialize"	SystemCommands := IdentitySet new.	SystemCommands addAll: #(		doForever doForeverIf doIf doRepeat doReturn doWhile		doBroadcastAndWait "doPlaySoundAndWait" doWaitUntil		scrollAndWait animateAndWait callSubroutine).! !!ScriptableScratchMorph methodsFor: 'blocks'!defaultArgsFor: blockSpec	"Answer the default argument for the given block specification."	| defaultArgs stage sel currentSize list |	defaultArgs := blockSpec copyFrom: 4 to: blockSpec size.  "may be empty"	stage := self ownerThatIsA: ScratchStageMorph.	sel := (blockSpec at: 3) asSymbol.	#gotoX:y: = sel ifTrue: [		defaultArgs := Array			with: self referencePosition x rounded			with: self referencePosition y rounded].	#glideSecs:toX:y:elapsed:from: = sel ifTrue: [		defaultArgs := Array			with: 1			with: self referencePosition x rounded			with: self referencePosition y rounded].	#motor:direction: = self ifTrue: [		defaultArgs := Array with: 'reverse' localized with: 'this way' localized with: 'that way'].	#setSizeTo: = sel ifTrue: [		currentSize := (100.0 * (self scalePoint x max: self scalePoint y)) rounded.		defaultArgs := Array with: currentSize].	#getAttribute:of: = sel ifTrue: [		(stage := self ownerThatIsA: ScratchStageMorph) ifNotNil: [			list := stage submorphs select: [:m | m isKindOf: ScratchSpriteMorph].			list sort: [:s1 :s2 | s1 objName asLowercase < s2 objName asLowercase].			list size > 0				ifTrue: [defaultArgs := Array with: 'x position' with: list first]				ifFalse: [defaultArgs := Array with: 'background #' with: stage]]		ifNil:[defaultArgs := Array with: 'x position' with: self]].	#concatenate:with: = sel ifTrue: [		defaultArgs := Array with: 'hello ' localized with: 'world' localized].	#doAsk = sel ifTrue: [		defaultArgs := Array with: 'What''s your name?' localized].	#letter:of: = sel ifTrue: [		defaultArgs := Array with: 1 with: 'world' localized].	#stringLength: = sel ifTrue: [		defaultArgs := Array with: 'world' localized].	#say:duration:elapsed:from: = sel ifTrue: [		defaultArgs := Array with: 'Hello!!' localized with: 2].	#say: = sel ifTrue: [		defaultArgs := Array with: 'Hello!!' localized].	#think:duration:elapsed:from: = sel ifTrue: [		defaultArgs := Array with: 'Hmm...' localized with: 2].	#think: = sel ifTrue: [		defaultArgs := Array with: 'Hmm...' localized].	(#(lookLike: showBackground:) includes: sel) ifTrue: [		defaultArgs := Array with: self costumeNames last].	"(#(playSound: doPlaySoundAndWait) includes: sel) ifTrue: [		list := self soundNames.		defaultArgs := list size <= 2			ifTrue: [Array with: '']			ifFalse: [Array with: (list at: (list size - 2))]]."	(#(broadcast: doBroadcastAndWait) includes: sel) ifTrue: [		stage ifNotNil: [defaultArgs := Array with: stage defaultEventName]].	(#(append:toList: deleteLine:ofList: insert:at:ofList:) includes: sel) ifTrue: [		defaultArgs size >= 1 ifTrue: [			defaultArgs at: 1 put: (defaultArgs at: 1) localized]].	(#(append:toList: deleteLine:ofList: getLine:ofList: insert:at:ofList: lineCountOfList:)		includes: sel) ifTrue: [			defaultArgs := defaultArgs copyWith: self defaultListName].	#setLine:ofList:to: = sel ifTrue: [		defaultArgs size >= 3 ifTrue: [			defaultArgs at: 2 put: self defaultListName.			defaultArgs at: 3 put: (defaultArgs at: 3) localized]].	#appendLettersOf:toList: = sel ifTrue: [		defaultArgs size >= 2 ifTrue: [			defaultArgs at: 1 put: (defaultArgs at: 1) localized.			defaultArgs at: 2 put: self defaultListName]].	#list:contains: = sel ifTrue: [		defaultArgs size >= 2 ifTrue: [			defaultArgs at: 1 put: self defaultListName.			defaultArgs at: 2 put: (defaultArgs at: 2) localized]].	#scrollAndWait = sel ifTrue: [		defaultArgs := Array with: 'Hello!!'].	#animateAndWait = sel ifTrue: [		defaultArgs := Array with: 'A'].	#replaceAllList:with: = sel ifTrue: [		defaultArgs size >= 1 ifTrue: [			defaultArgs at: 1 put: self defaultListName]].	#clearNeoPixel: = sel ifTrue: [		defaultArgs := Array with: self defaultNeoPixelName].	#showNeoPixel: = sel ifTrue: [		defaultArgs := Array with: self defaultNeoPixelName].	#setNo:r:g:b:neoPixel: = sel ifTrue: [		defaultArgs at: 5 put: self defaultNeoPixelName].	#callSubroutine = sel ifTrue: [		stage ifNotNil: [defaultArgs := Array with: stage defaultEventName]].	^ defaultArgs! !!ScratchStageMorph methodsFor: 'scratch processes/events'!stopAll	"Stop all processes and make sure I am stepping."	| sFrame |	World hands do: [:h | h newKeyboardFocus: nil; clearUnclaimedKeystrokes].	Sensor clearKeystate.	"SoundPlayer stopPlayingAll."	self class stopSoundRecorder.	self stopAllProcesses.	self stopAsks.	self deleteAllClones.	"self midiAllNotesOff."	WeDoPlugin resetWeDo.	"self stopPlaying.	self allMorphsDo: [:m |		(m isKindOf: ScriptableScratchMorph) ifTrue: [m stopPlaying]]."	(sFrame _ self ownerThatIsA: ScratchFrameMorph) ifNotNil: [		sFrame scriptsPane allMorphsDo: [:m |			(m respondsTo: #stop) ifTrue: [m stop].			(m respondsTo: #litUp:) ifTrue: [m litUp: false]].		World startSteppingSubmorphsOf: sFrame].	World startSteppingSubmorphsOf: self.! !!ScriptableScratchMorph class methodsFor: 'block specs'!obsoleteBlockSpecs	"Answer a list of specifications for the graphic filter blocks."	^ #(	'obsolete number blocks'		('abs %n'							r	abs -)		('sqrt %n'							r	sqrt -)	"'obsolete sound blocks'		('rewind sound %S'					-	rewindSound:)"	'obsolete sprite motion blocks'		('point away from edge'				-	turnAwayFromEdge)		('glide x:%n y:%n in %n secs'		t	gotoX:y:duration:elapsed:from: 50 50 1)	'obsolete sprite looks blocks'		('change costume by %n'			-	changeCostumeIndexBy: 1)		('change background by %n' 		-	changeBackgroundIndexBy: 1)		-		('change stretch by %n'				-	changeStretchBy:)		('set stretch to %n%'					-	setStretchTo: 100)		-		('say nothing'						-	sayNothing)		-		('change visibility by %n'			-	changeVisibilityBy: -10)		('set visibility to %n%'				-	setVisibilityTo: 100)	'obsolete image effects'		('change color-effect by %n'		-	changeHueShiftBy: 25)		('set color-effect to %n'				-	setHueShiftTo: 0)		-		('change fisheye by %n'			-	changeFisheyeBy: 10)		('set fisheye to %n'					-	setFisheyeTo: 0)		~		('change whirl by %n'				-	changeWhirlBy: 30)		('set whirl to %n'					-	setWhirlTo: 0)		-		('change pixelate by %n'			- 	changePixelateCountBy: 1)		('set pixelate to %n'					- 	setPixelateCountTo: 1)		~		('change mosaic by %n'				- 	changeMosaicCountBy: 1)		('set mosaic to %n'					- 	setMosaicCountTo: 1)		-		('change brightness-shift by %n'	-	changeBrightnessShiftBy: 10)		('set brightness-shift to %n'			-	setBrightnessShiftTo: 0)		~		('change saturation-shift by %n'	-	changeSaturationShiftBy: 10)		('set saturation-shift to %n'			-	setSaturationShiftTo: 0)		-		('change pointillize drop by %n'		-	changePointillizeSizeBy: 5)		('set pointillize drop to %n'			-	setPointillizeSizeTo: 0)		~		('change water ripple by %n'		-	changeWaterRippleBy: 5)		('set water ripple to %n'				-	setWaterRippleTo: 0)		-		('change blur by %n'				-	changeBlurBy: 1)		('set blur to %n'						-	setBlurTo: 0)	)! !ScratchStageMorph removeSelector: #closeMIDI!ScratchStageMorph removeSelector: #midiAllNotesOff!ScratchStageMorph removeSelector: #midiPortNum!ScratchStageMorph removeSelector: #midiPortNum:!ScratchStageMorph removeSelector: #notePlayerFor:!ScratchStageMorph removeSelector: #openMIDI!ScratchStageMorph removeSelector: #setTempoTo:!ScratchStageMorph removeSelector: #stopAllSounds!ScratchStageMorph removeSelector: #tempo!ScratchStageMorph removeSelector: #tryToOpenMidiPort!ScratchSpriteMorph removeSelector: #stopPlaying!ScriptableScratchMorph removeSelector: #changeTempoBy:!ScriptableScratchMorph removeSelector: #changeVolumeBy:!ScriptableScratchMorph removeSelector: #drum:duration:elapsed:from:!ScriptableScratchMorph removeSelector: #midiDrumMenu!ScriptableScratchMorph removeSelector: #midiInstrument:!ScriptableScratchMorph removeSelector: #midiInstrumentMenu!ScriptableScratchMorph removeSelector: #midiNoteMenu!ScriptableScratchMorph removeSelector: #noteOn:duration:elapsed:from:!ScriptableScratchMorph removeSelector: #noteSelector!ScriptableScratchMorph removeSelector: #numberInParens:!ScriptableScratchMorph removeSelector: #playMidi:!ScriptableScratchMorph removeSelector: #playSound:!ScriptableScratchMorph removeSelector: #recordSound!ScriptableScratchMorph removeSelector: #rest:elapsed:from:!ScriptableScratchMorph removeSelector: #rewindSound:!ScriptableScratchMorph removeSelector: #setInstrument:!ScriptableScratchMorph removeSelector: #setInstrumentMenu!ScriptableScratchMorph removeSelector: #setTempoTo:!ScriptableScratchMorph removeSelector: #setVolumeTo:!ScriptableScratchMorph removeSelector: #soundFromIndex:!ScriptableScratchMorph removeSelector: #soundLevel!ScriptableScratchMorph removeSelector: #soundNamed:ifAbsent:!ScriptableScratchMorph removeSelector: #soundNames!ScriptableScratchMorph removeSelector: #soundsPage:!ScriptableScratchMorph removeSelector: #stopAllSounds!ScriptableScratchMorph removeSelector: #stopPlaying!ScriptableScratchMorph removeSelector: #tempo!ScratchThread initialize!ScratchProcess removeSelector: #doPlaySoundAndWait!ScratchFrameMorph removeSelector: #newSound!ScratchFrameMorph removeSelector: #openMIDI!
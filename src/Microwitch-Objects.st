Object subclass: #MicrobitButton	instanceVariableNames: 'count on '	classVariableNames: ''	poolDictionaries: ''	category: 'Microwitch-Objects'!!MicrobitButton methodsFor: 'initialize' stamp: 'EiichiroIto 6/27/2018 19:00'!initialize	super initialize.	on := false.	count := 0.! !!MicrobitButton methodsFor: 'accessing' stamp: 'EiichiroIto 6/19/2018 18:48'!count	^ count! !!MicrobitButton methodsFor: 'accessing' stamp: 'EiichiroIto 6/27/2018 19:00'!on	count := 0.	^ on! !!MicrobitButton methodsFor: 'accessing' stamp: 'EiichiroIto 6/27/2018 19:00'!on: aBoolean 	(on not and: [aBoolean])		ifTrue: [count := count + 1].	on := aBoolean! !!MicrobitButton methodsFor: 'accessing' stamp: 'EiichiroIto 6/19/2018 17:48'!reset	count := 0.! !!MicrobitButton methodsFor: 'private' stamp: 'EiichiroIto 6/20/2018 13:55'!privCount	^ count! !!MicrobitButton methodsFor: 'private' stamp: 'EiichiroIto 6/20/2018 14:18'!privCount: anInteger	count := anInteger.! !!MicrobitButton methodsFor: 'private' stamp: 'EiichiroIto 6/20/2018 13:55'!privOn	^ on! !!MicrobitButton methodsFor: 'private' stamp: 'EiichiroIto 6/20/2018 14:18'!privOn: aBoolean	on := aBoolean.! !!MicrobitButton methodsFor: 'printing' stamp: 'EiichiroIto 6/20/2018 07:32'!printOn: aStream 	aStream nextPutAll: 'Button('.	aStream nextPutAll: (on			ifTrue: ['on']			ifFalse: ['off']).	aStream nextPut: $,.	aStream nextPutAll: count asString.	aStream nextPut: $).! !Morph subclass: #MicrobitButtonMorph	instanceVariableNames: 'target '	classVariableNames: ''	poolDictionaries: ''	category: 'Microwitch-Objects'!!MicrobitButtonMorph methodsFor: 'accessing' stamp: 'EiichiroIto 6/19/2018 21:42'!target: anObject	target := anObject.! !!MicrobitButtonMorph methodsFor: 'event handling' stamp: 'EiichiroIto 6/19/2018 21:42'!handlesMouseDown: evt	^ true! !!MicrobitButtonMorph methodsFor: 'event handling' stamp: 'EiichiroIto 6/27/2018 19:00'!mouseDown: anEvent 	target ifNil: [^ self].	target on: true! !!MicrobitButtonMorph methodsFor: 'event handling' stamp: 'EiichiroIto 6/19/2018 21:47'!mouseUp: anEvent 	target ifNil: [^ self].	target on: false! !!MicrobitButtonMorph methodsFor: 'object i/o' stamp: 'EiichiroIto 6/20/2018 20:44'!initFieldsFrom: anObjStream version: classVersion	super initFieldsFrom: anObjStream version: classVersion.	self initFieldsNamed: #(		target	) from: anObjStream.! !!MicrobitButtonMorph methodsFor: 'object i/o' stamp: 'EiichiroIto 6/20/2018 20:44'!storeFieldsOn: anObjStream	super storeFieldsOn: anObjStream.	self storeFieldsNamed: #(		target	) on: anObjStream.! !!MicrobitButtonMorph methodsFor: 'initialization' stamp: 'EiichiroIto 6/21/2018 16:33'!initialize	super initialize.	self color: Color blue.! !Object subclass: #MicrobitIOPin	instanceVariableNames: 'mode status '	classVariableNames: ''	poolDictionaries: ''	category: 'Microwitch-Objects'!!MicrobitIOPin methodsFor: 'accessing' stamp: 'EiichiroIto 6/20/2018 13:52'!mode	^ mode! !!MicrobitIOPin methodsFor: 'accessing' stamp: 'EiichiroIto 6/20/2018 13:53'!mode: aSymbol	mode := aSymbol.! !!MicrobitIOPin methodsFor: 'accessing' stamp: 'EiichiroIto 6/20/2018 13:53'!status	^ status! !!MicrobitIOPin methodsFor: 'accessing' stamp: 'EiichiroIto 6/20/2018 13:53'!status: aSymbol	status := aSymbol.! !Object subclass: #MicrobitLed	instanceVariableNames: 'matrix active scrollingPos scrollingRaster '	classVariableNames: 'CharDict SymbolDict '	poolDictionaries: ''	category: 'Microwitch-Objects'!!MicrobitLed methodsFor: 'initialize' stamp: 'EiichiroIto 6/27/2018 19:00'!initialize	super initialize.	self clear.	active := true.	scrollingPos := 0.! !!MicrobitLed methodsFor: 'accessing' stamp: 'EiichiroIto 6/20/2018 12:58'!active	^ active! !!MicrobitLed methodsFor: 'accessing' stamp: 'EiichiroIto 6/20/2018 12:59'!active: aBoolean	active := aBoolean.! !!MicrobitLed methodsFor: 'accessing' stamp: 'EiichiroIto 6/27/2018 19:00'!clear	matrix := self newMatrix.! !!MicrobitLed methodsFor: 'accessing' stamp: 'EiichiroIto 6/20/2018 05:47'!columns	^ 5! !!MicrobitLed methodsFor: 'accessing' stamp: 'EiichiroIto 6/27/2018 19:00'!doOneCycle	scrollingPos < 1 ifTrue: [^ self].	matrix := scrollingRaster copyFrom: scrollingPos to: scrollingPos + 4.	scrollingPos := scrollingPos + 1.	scrollingPos + 5 > scrollingRaster size		ifTrue: 			[scrollingPos := 0.			^ false]		ifFalse: [^ true]! !!MicrobitLed methodsFor: 'accessing' stamp: 'EiichiroIto 6/20/2018 05:47'!lines	^ 5! !!MicrobitLed methodsFor: 'accessing' stamp: 'EiichiroIto 6/20/2018 05:45'!matrix	^ matrix! !!MicrobitLed methodsFor: 'accessing' stamp: 'EiichiroIto 6/27/2018 19:00'!scroll: aString 	| in result c image m cols |	scrollingPos > 0 ifTrue: [^ self].	in := ReadStream on: aString.	result := OrderedCollection new.	self addSpaceTo: result.	[in atEnd]		whileFalse: 			[c := in next.			image := self class charAt: c.			m := self newMatrix.			self setMatrixFrom: image to: m.			cols := self trimMatrix: m.			cols ifNil: [self addSpaceTo: result]				ifNotNil: [result add: self newColumn;					 addAll: cols;					 add: self newColumn]].	self addSpaceTo: result.	scrollingRaster := result asArray.	scrollingPos := 1.! !!MicrobitLed methodsFor: 'accessing' stamp: 'EiichiroIto 6/27/2018 19:00'!showImage: aString 	self setMatrixFrom: aString to: matrix.! !!MicrobitLed methodsFor: 'accessing' stamp: 'EiichiroIto 6/27/2018 19:00'!x: x y: y 	(x between: 0 and: self columns - 1)		ifFalse: [^ 0].	(y between: 0 and: self lines - 1)		ifFalse: [^ 0].	^ (matrix at: x + 1)		at: y + 1! !!MicrobitLed methodsFor: 'accessing' stamp: 'EiichiroIto 6/27/2018 19:00'!x: x y: y v: v	(x between: 0 and: self columns - 1)		ifFalse: [^ self].	(y between: 0 and: self lines - 1)		ifFalse: [^ self].	(matrix at: x + 1) at: y + 1 put: v.! !!MicrobitLed methodsFor: 'private' stamp: 'EiichiroIto 6/21/2018 22:12'!addSpaceTo: aCollection	self columns timesRepeat: [aCollection add: self newColumn].! !!MicrobitLed methodsFor: 'private' stamp: 'EiichiroIto 6/21/2018 22:02'!newColumn	^ Array new: self lines withAll: 0! !!MicrobitLed methodsFor: 'private' stamp: 'EiichiroIto 6/27/2018 19:00'!newMatrix	| m |	m := Array new: self columns.	1 to: self columns do: [:each | m at: each put: self newColumn].	^ m! !!MicrobitLed methodsFor: 'private' stamp: 'EiichiroIto 6/20/2018 18:37'!privMatrix: aCollection	matrix := aCollection.! !!MicrobitLed methodsFor: 'private' stamp: 'EiichiroIto 6/21/2018 21:43'!setMatrixFrom: aString to: anArray	| stream c x y |	stream := ReadStream on: aString.	x := 1.	y := 1.	[stream atEnd]		whileFalse: 			[c := stream next.			c = $:				ifTrue: 					[y := y + 1.					x := 1].			(c between: $0 and: $9)				ifTrue: [(anArray at: x)						at: y put: c asciiValue - $0 asciiValue.						x := x + 1]]! !!MicrobitLed methodsFor: 'private' stamp: 'EiichiroIto 6/27/2018 19:00'!trimMatrix: anArray 	| start end |	start := end := nil.	anArray		withIndexDo: [:each :index | each sum = 0				ifFalse: 					[start ifNil: [start := index].					end := index]].	start ifNil: [^ nil].	^ anArray copyFrom: start to: end! !!MicrobitLed methodsFor: 'printing' stamp: 'EiichiroIto 6/20/2018 07:07'!printOn: aStream 	aStream nextPutAll: 'Image('.	matrix do: 		[:each | 		each do: [:v | aStream nextPutAll: v asString].		aStream nextPut: $:].	aStream nextPut: $)! !!MicrobitLed methodsFor: 'testing' stamp: 'EiichiroIto 6/22/2018 07:06'!isScrolling	^ scrollingPos > 0! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MicrobitLed class	instanceVariableNames: ''!!MicrobitLed class methodsFor: 'initialization' stamp: 'EiichiroIto 6/27/2018 19:00'!initialize	"MicrobitLed initialize."	self initializeSymbolDict.	self initializeCharDict! !!MicrobitLed class methodsFor: 'initialization' stamp: 'EiichiroIto 6/27/2018 19:00'!initializeCharDict	"MicrobitLed initializeCharDict."	CharDict := Dictionary new.	CharDict at: #'char_a' put: '00000:09990:90090:90090:09999:'.	CharDict at: #'char_b' put: '90000:90000:99900:90090:99900:'.	CharDict at: #'char_c' put: '00000:09990:90000:90000:09990:'.	CharDict at: #'char_d' put: '00090:00090:09990:90090:09990:'.	CharDict at: #'char_e' put: '09900:90090:99900:90000:09990:'.	CharDict at: #'char_f' put: '00990:09000:99900:09000:09000:'.	CharDict at: #'char_g' put: '09990:90090:09990:00090:09900:'.	CharDict at: #'char_h' put: '90000:90000:99900:90090:90090:'.	CharDict at: #'char_i' put: '09000:00000:09000:09000:09000:'.	CharDict at: #'char_j' put: '00090:00000:00090:00090:09900:'.	CharDict at: #'char_k' put: '90000:90900:99000:90900:90090:'.	CharDict at: #'char_l' put: '09000:09000:09000:09000:00990:'.	CharDict at: #'char_m' put: '00000:99099:90909:90009:90009:'.	CharDict at: #'char_n' put: '00000:99900:90090:90090:90090:'.	CharDict at: #'char_o' put: '00000:09900:90090:90090:09900:'.	CharDict at: #'char_p' put: '00000:99900:90090:99900:90000:'.	CharDict at: #'char_q' put: '00000:09990:90090:09990:00090:'.	CharDict at: #'char_r' put: '00000:09990:90000:90000:90000:'.	CharDict at: #'char_s' put: '00000:00990:09000:00900:99000:'.	CharDict at: #'char_t' put: '09000:09000:09990:09000:00999:'.	CharDict at: #'char_u' put: '00000:90090:90090:90090:09999:'.	CharDict at: #'char_v' put: '00000:90009:90009:09090:00900:'.	CharDict at: #'char_w' put: '00000:90009:90009:90909:99099:'.	CharDict at: #'char_x' put: '00000:90090:09900:09900:90090:'.	CharDict at: #'char_y' put: '00000:90009:09090:00900:99000:'.	CharDict at: #'char_z' put: '00000:99990:00900:09000:99990:'.	CharDict at: #'char_A' put: '09900:90090:99990:90090:90090:'.	CharDict at: #'char_B' put: '99900:90090:99900:90090:99900:'.	CharDict at: #'char_C' put: '09990:90000:90000:90000:09990:'.	CharDict at: #'char_D' put: '99900:90090:90090:90090:99900:'.	CharDict at: #'char_E' put: '99990:90000:99900:90000:99990:'.	CharDict at: #'char_F' put: '99990:90000:99900:90000:90000:'.	CharDict at: #'char_G' put: '09990:90000:90099:90009:09990:'.	CharDict at: #'char_H' put: '90090:90090:99990:90090:90090:'.	CharDict at: #'char_I' put: '99900:09000:09000:09000:99900:'.	CharDict at: #'char_J' put: '99999:00090:00090:90090:09900:'.	CharDict at: #'char_K' put: '90090:90900:99000:90900:90090:'.	CharDict at: #'char_L' put: '90000:90000:90000:90000:99990:'.	CharDict at: #'char_M' put: '90009:99099:90909:90009:90009:'.	CharDict at: #'char_N' put: '90009:99009:90909:90099:90009:'.	CharDict at: #'char_O' put: '09900:90090:90090:90090:09900:'.	CharDict at: #'char_P' put: '99900:90090:99900:90000:90000:'.	CharDict at: #'char_Q' put: '09900:90090:90090:09900:00990:'.	CharDict at: #'char_R' put: '99900:90090:99900:90090:90009:'.	CharDict at: #'char_S' put: '09990:90000:09900:00090:99900:'.	CharDict at: #'char_T' put: '99999:00900:00900:00900:00900:'.	CharDict at: #'char_U' put: '90090:90090:90090:90090:09900:'.	CharDict at: #'char_V' put: '90009:90009:90009:09090:00900:'.	CharDict at: #'char_W' put: '90009:90009:90909:99099:90009:'.	CharDict at: #'char_X' put: '90090:90090:09900:90090:90090:'.	CharDict at: #'char_Y' put: '90009:09090:00900:00900:00900:'.	CharDict at: #'char_Z' put: '99990:00900:09000:90000:99990:'.	CharDict at: #'char_0' put: '09900:90090:90090:90090:09900:'.	CharDict at: #'char_1' put: '00900:09900:00900:00900:09990:'.	CharDict at: #'char_2' put: '99900:00090:09900:90000:99990:'.	CharDict at: #'char_3' put: '99990:00090:00900:90090:09900:'.	CharDict at: #'char_4' put: '00990:09090:90090:99999:00090:'.	CharDict at: #'char_5' put: '99999:90000:99990:00009:99990:'.	CharDict at: #'char_6' put: '00090:00900:09990:90009:09990:'.	CharDict at: #'char_7' put: '99999:00090:00900:09000:90000:'.	CharDict at: #'char_8' put: '09990:90009:09990:90009:09990:'.	CharDict at: #'char_9' put: '09990:90009:09990:00900:09000:'.	CharDict at: #'char_!!' put: '09000:09000:09000:00000:09000:'.	CharDict at: #'char_"' put: '09090:09090:00000:00000:00000:'.	CharDict at: #'char_#' put: '09090:99999:09090:99999:09090:'.	CharDict at: #'char_$' put: '09990:99009:09990:90099:09990:'.	CharDict at: #'char_%' put: '99009:90090:00900:09009:90099:'.	CharDict at: #'char_&' put: '09900:90090:09900:90090:09909:'.	CharDict at: #'char_;' put: '00000:00900:00000:00900:09000:'.	CharDict at: #'char_(' put: '00900:09000:09000:09000:00900:'.	CharDict at: #'char_)' put: '09000:00900:00900:00900:09000:'.	CharDict at: #'char_*' put: '00000:09090:00900:09090:00000:'.	CharDict at: #'char_+' put: '00000:00900:09990:00900:00000:'.	CharDict at: #'char_,' put: '00000:00000:00000:00900:09000:'.	CharDict at: #'char_-' put: '00000:00000:09990:00000:00000:'.	CharDict at: #'char_.' put: '00000:00000:00000:09000:00000:'.	CharDict at: #'char_/' put: '00009:00090:00900:09000:90000:'.	CharDict at: #'char_:' put: '00000:09000:00000:09000:00000:'.	CharDict at: #'char_<' put: '00090:00900:09000:00900:00090:'.	CharDict at: #'char_=' put: '00000:09990:00000:09990:00000:'.	CharDict at: #'char_>' put: '09000:00900:00090:00900:09000:'.	CharDict at: #'char_?' put: '09990:90009:00990:00000:00900:'.	CharDict at: #'char_^' put: '00900:09090:00000:00000:00000:'.	CharDict at: #'char__' put: '00000:00000:00000:00000:99999:'.	CharDict at: #'char_`' put: '09000:00900:00000:00000:00000:'.	CharDict at: #'char_~' put: '00000:00000:09900:00099:00000:'.	CharDict at: #'char_\' put: '90000:09000:00900:00090:00009:'.	CharDict at: #'char_|' put: '09000:09000:09000:09000:09000:'.	CharDict at: #'char_''' put: '09000:09000:00000:00000:00000:'.	CharDict at: #'char_ ' put: '00000:00000:00000:00000:00000:'.! !!MicrobitLed class methodsFor: 'initialization' stamp: 'EiichiroIto 6/27/2018 19:00'!initializeSymbolDict	"MicrobitLed initializeSymbolDict."	SymbolDict := Dictionary new.	SymbolDict at: #heart put: '09090:99999:99999:09990:00900:'.	SymbolDict at: #heartSmall put: '00000:09090:09990:00900:00000:'.	SymbolDict at: #happy put: '00000:09090:00000:90009:09990:'.	SymbolDict at: #smile put: '00000:00000:00000:90009:09990:'.	SymbolDict at: #sad put: '00000:09090:00000:09990:90009:'.	SymbolDict at: #confused put: '00000:09090:00000:09090:90909:'.	SymbolDict at: #angry put: '90009:09090:00000:99999:90909:'.	SymbolDict at: #asleep put: '00000:99099:00000:09990:00000:'.	SymbolDict at: #surprised put: '09090:00000:00900:09090:00900:'.	SymbolDict at: #silly put: '90009:00000:99999:00909:00999:'.	SymbolDict at: #fabulous put: '99999:99099:00000:09090:09990:'.	SymbolDict at: #meh put: '09090:00000:00090:00900:09000:'.	SymbolDict at: #yes put: '00000:00009:00090:90900:09000:'.	SymbolDict at: #no put: '90009:09090:00900:09090:90009:'.	SymbolDict at: #clock12 put: '00900:00900:00900:00000:00000:'.	SymbolDict at: #clock11 put: '09000:09000:00900:00000:00000:'.	SymbolDict at: #clock10 put: '00000:99000:00900:00000:00000:'.	SymbolDict at: #clock9 put: '00000:00000:99900:00000:00000:'.	SymbolDict at: #clock8 put: '00000:00000:00900:99000:00000:'.	SymbolDict at: #clock7 put: '00000:00000:00900:09000:09000:'.	SymbolDict at: #clock6 put: '00000:00000:00900:00900:00900:'.	SymbolDict at: #clock5 put: '00000:00000:00900:00090:00090:'.	SymbolDict at: #clock4 put: '00000:00000:00900:00099:00000:'.	SymbolDict at: #clock3 put: '00999:00000:00000:00000:00000:'.	SymbolDict at: #clock2 put: '00000:00099:00900:00000:00000:'.	SymbolDict at: #clock1 put: '00090:00090:00900:00000:00000:'.	SymbolDict at: #arrowN put: '00900:09990:90909:00900:00900:'.	SymbolDict at: #arrowNE put: '00999:00099:00909:09000:90000:'.	SymbolDict at: #arrowE put: '00900:00090:99999:00090:00900:'.	SymbolDict at: #arrowSE put: '90000:09000:00909:00099:00999:'.	SymbolDict at: #arrowS put: '00900:00900:90909:09990:00900:'.	SymbolDict at: #arrowSW put: '00009:00090:90900:99000:99900:'.	SymbolDict at: #arrowW put: '00900:09000:99999:09000:00900:'.	SymbolDict at: #arrowNW put: '99900:99000:90900:00090:00009:'.	SymbolDict at: #triangle put: '00000:00900:09090:99999:00000:'.	SymbolDict at: #triangleLeft put: '90000:99000:90900:90090:99999:'.	SymbolDict at: #chessboard put: '09090:90909:09090:90909:09090:'.	SymbolDict at: #diamond put: '00900:09090:90009:09090:00900:'.	SymbolDict at: #diamondSmall put: '00000:00900:09090:00900:00000:'.	SymbolDict at: #square put: '99999:90009:90009:90009:99999:'.	SymbolDict at: #squareSmall put: '00000:09990:09090:09990:00000:'.	SymbolDict at: #rabbit put: '90900:90900:99990:99090:99990:'.	SymbolDict at: #cow put: '90009:90009:99999:09990:00900:'.	SymbolDict at: #musicCrotchet put: '00900:00900:00900:99900:99900:'.	SymbolDict at: #musicQuaver put: '00900:00990:00909:99900:99900:'.	SymbolDict at: #musicQuavers put: '09999:09009:09009:99099:99099:'.	SymbolDict at: #pitchfork put: '90909:90909:99999:00900:00900:'.	SymbolDict at: #xmas put: '00900:09990:00900:09990:99999:'.	SymbolDict at: #pacman put: '09999:99090:99900:99990:09999:'.	SymbolDict at: #target put: '00900:09990:99099:09990:00900:'.	SymbolDict at: #tshirt put: '99099:99999:09990:09990:09990:'.	SymbolDict at: #rollerskate put: '00099:00099:99999:99999:09090:'.	SymbolDict at: #duck put: '09900:99900:09999:09990:00000:'.	SymbolDict at: #house put: '00900:09990:99999:09990:09090:'.	SymbolDict at: #tortoise put: '00000:09990:99999:09090:00000:'.	SymbolDict at: #butterfly put: '99099:99999:00900:99999:99099:'.	SymbolDict at: #stickfigure put: '00900:99999:00900:09090:90009:'.	SymbolDict at: #ghost put: '99999:90909:99999:99999:90909:'.	SymbolDict at: #sword put: '00900:00900:00900:09990:00900:'.	SymbolDict at: #giraffe put: '99000:09000:09000:09990:09090:'.	SymbolDict at: #skull put: '09990:90909:99999:09990:09990:'.	SymbolDict at: #umbrella put: '09990:99999:00900:90900:09900:'.	SymbolDict at: #snake put: '99000:99099:09090:09990:00000:'.! !!MicrobitLed class methodsFor: 'accessing' stamp: 'EiichiroIto 6/27/2018 19:00'!charAt: aCharacter	^ CharDict at: ('char_', aCharacter asString) asSymbol! !!MicrobitLed class methodsFor: 'accessing' stamp: 'EiichiroIto 6/21/2018 14:03'!symbolAt: aSymbol	^ SymbolDict at: aSymbol! !Morph subclass: #MicrobitLedMorph	instanceVariableNames: 'target '	classVariableNames: ''	poolDictionaries: ''	category: 'Microwitch-Objects'!!MicrobitLedMorph methodsFor: 'accessing' stamp: 'EiichiroIto 6/19/2018 22:13'!target: anObject	target := anObject.! !!MicrobitLedMorph methodsFor: 'stepping and presenter' stamp: 'EiichiroIto 6/27/2018 19:00'!step	target doOneCycle.	self changed.! !!MicrobitLedMorph methodsFor: 'stepping and presenter' stamp: 'EiichiroIto 6/27/2018 19:00'!stepTime	^ 100! !!MicrobitLedMorph methodsFor: 'stepping and presenter' stamp: 'EiichiroIto 6/20/2018 05:57'!wantsSteps	^ true! !!MicrobitLedMorph methodsFor: 'drawing' stamp: 'EiichiroIto 6/27/2018 19:00'!drawOn: aCanvas 	| w h x y r |	target ifNil: [^ self].	target active ifFalse: [^ self].	aCanvas frameRectangle: self bounds color: Color blue.	w := (self width + 5) // target columns.	h := (self height + 9) // target lines.	x := self left.	target matrix do: 		[:each | 		y := self top.		each do: 			[:v | 			r := x @ y extent: 5 @ 9.			v > 0				ifTrue: [aCanvas fillRectangle: r color: Color red].			y := y + h].		x := x + w]! !!MicrobitLedMorph methodsFor: 'object i/o' stamp: 'EiichiroIto 6/20/2018 20:48'!initFieldsFrom: anObjStream version: classVersion	super initFieldsFrom: anObjStream version: classVersion.	self initFieldsNamed: #(		target	) from: anObjStream.! !!MicrobitLedMorph methodsFor: 'object i/o' stamp: 'EiichiroIto 6/20/2018 20:48'!storeFieldsOn: anObjStream	super storeFieldsOn: anObjStream.	self storeFieldsNamed: #(		target	) on: anObjStream.! !ScratchSpriteMorph subclass: #MicrobitSpriteMorph	instanceVariableNames: 'led pins sensors buttons startMsec calibrated '	classVariableNames: ''	poolDictionaries: ''	category: 'Microwitch-Objects'!!MicrobitSpriteMorph methodsFor: 'private' stamp: 'EiichiroIto 6/20/2018 07:21'!coerceChoiceArg: aMorphOrSymbol	(aMorphOrSymbol isKindOf: Symbol) ifTrue: [^ aMorphOrSymbol].	^ aMorphOrSymbol choice! !!MicrobitSpriteMorph methodsFor: 'private' stamp: 'EiichiroIto 6/19/2018 10:11'!costumePath: fileName 	| costumeFolder |	costumeFolder := ScratchFileChooserDialog getDefaultFolderForType: #costume.	^ costumeFolder pathName , FileDirectory slash , fileName! !!MicrobitSpriteMorph methodsFor: 'private' stamp: 'EiichiroIto 6/27/2018 19:00'!layoutChanged	super layoutChanged.	submorphs size >= 3		ifTrue: 			[(submorphs at: 1)				position: self topLeft + (14 @ 75).			(submorphs at: 2)				position: self topLeft + (166 @ 75).			(submorphs at: 3)				position: self topLeft + (65 @ 53)]! !!MicrobitSpriteMorph methodsFor: 'list names' stamp: 'EiichiroIto 6/16/2018 10:48'!buttonNames	^ #(a b)! !!MicrobitSpriteMorph methodsFor: 'list names' stamp: 'EiichiroIto 6/16/2018 17:07'!gestureNames	^ #(up down left right 'face up' 'face down' freefall '3g' '6g' '8g' shake)! !!MicrobitSpriteMorph methodsFor: 'list names' stamp: 'EiichiroIto 6/27/2018 19:00'!ledArrowNames	^ #(arrowN arrowNE arrowE arrowSE arrowS arrowSW arrowW arrowNW)! !!MicrobitSpriteMorph methodsFor: 'list names' stamp: 'EiichiroIto 6/15/2018 20:16'!ledCharacterNames	^ #(rabbit cow musicCrotchet musicQuaver musicQuavers pitchfork xmas pacman target tshirt rollerskate duck house tortoise butterfly stickfigure ghost sword giraffe skull umbrella snake)! !!MicrobitSpriteMorph methodsFor: 'list names' stamp: 'EiichiroIto 6/27/2018 19:00'!ledClockNames	^ #(clock1 clock2 clock3 clock4 clock5 clock6 clock7 clock8 clock9 clock10 clock11 clock12)! !!MicrobitSpriteMorph methodsFor: 'list names' stamp: 'EiichiroIto 6/27/2018 19:00'!ledShapeNames	^ #(triangle triangleLeft chessboard diamond diamondSmall square squareSmall)! !!MicrobitSpriteMorph methodsFor: 'list names' stamp: 'EiichiroIto 6/27/2018 19:00'!ledSymbolNames	^ #(heart heartSmall happy smile sad confused angry asleep surprised silly fabulous meh yes no)! !!MicrobitSpriteMorph methodsFor: 'list names' stamp: 'EiichiroIto 6/16/2018 09:47'!musicNames	^ #(dadadadum entertainer prelude ode nyan ringtone funk blues birthday wedding funeral punchline python baddy chase baDing wawawawaa jumpUp jumpDown powerUp powerDown)! !!MicrobitSpriteMorph methodsFor: 'list names' stamp: 'EiichiroIto 6/27/2018 19:00'!sensorNames	^ #(accelX accelY accelZ compassX compassY compassZ)! !!MicrobitSpriteMorph methodsFor: 'initialization' stamp: 'EiichiroIto 6/27/2018 19:00'!buildSubmorphs	| morph |	morph := MicrobitButtonMorph new extent: 20 @ 20;			 target: (buttons at: 1).	self addMorphBack: morph.	morph := MicrobitButtonMorph new extent: 20 @ 20;			 target: (buttons at: 2).	self addMorphBack: morph.	morph := MicrobitLedMorph new extent: 75 @ 75;			 target: led.	self addMorphBack: morph! !!MicrobitSpriteMorph methodsFor: 'initialization' stamp: 'EiichiroIto 6/27/2018 19:00'!initialize	super initialize.	self extent: 400 @ 169.	buttons := Array with: MicrobitButton new with: MicrobitButton new.	led := MicrobitLed new.	startMsec := Time millisecondClockValue.	calibrated := false.	"pins := Array new: 21.	1 to: 21 do: [:each | pins at: each put: MicrobitIOPin new]."	self buildSubmorphs.! !!MicrobitSpriteMorph methodsFor: 'io blocks' stamp: 'EiichiroIto 6/27/2018 19:00'!buttonIsPressed: aMorph	| choice |	choice := self coerceChoiceArg: aMorph.	choice = #a ifTrue: [^ (buttons at: 1) on].	choice = #b ifTrue: [^ (buttons at: 2) on].	self error: 'invalid arg'.! !!MicrobitSpriteMorph methodsFor: 'io blocks' stamp: 'EiichiroIto 6/19/2018 21:36'!buttonWasPressed: aMorph	| choice |	choice := self coerceChoiceArg: aMorph.	choice = #a ifTrue: [^ (buttons at: 1) count > 0].	choice = #b ifTrue: [^ (buttons at: 2) count > 0].	self error: 'invalid arg'.! !!MicrobitSpriteMorph methodsFor: 'io blocks' stamp: 'EiichiroIto 6/19/2018 21:37'!countOfButtonPressed: aMorph	| choice |	choice := self coerceChoiceArg: aMorph.	choice = #a ifTrue: [^ (buttons at: 1) count].	choice = #b ifTrue: [^ (buttons at: 2) count].	self error: 'invalid arg'.! !!MicrobitSpriteMorph methodsFor: 'io blocks' stamp: 'EiichiroIto 6/27/2018 19:00'!pinIsTouched: anInteger	Transcript cr; show: 'pinIsTouched: '; show: anInteger asString.	^ false! !!MicrobitSpriteMorph methodsFor: 'io blocks' stamp: 'EiichiroIto 6/27/2018 19:00'!readAnalog: anInteger	Transcript cr; show: 'readAnalog: '; show: anInteger asString.	^ 0! !!MicrobitSpriteMorph methodsFor: 'io blocks' stamp: 'EiichiroIto 6/27/2018 19:00'!readDigital: anObject	Transcript cr; show: 'readDigital: '; show: anObject asString.	^ 0! !!MicrobitSpriteMorph methodsFor: 'io blocks' stamp: 'EiichiroIto 6/22/2018 16:42'!setAnalogPeriod: anInteger msec: anObject	Transcript cr; show: 'setAnalogPeriod: '; show: anInteger; show: ' msec: '; show: anObject.! !!MicrobitSpriteMorph methodsFor: 'io blocks' stamp: 'EiichiroIto 6/22/2018 16:41'!writeAnalog: anInteger to: anObject	Transcript cr; show: 'writeAnalog: '; show: anInteger asString; show: ' to: '; show: anObject.! !!MicrobitSpriteMorph methodsFor: 'io blocks' stamp: 'EiichiroIto 6/22/2018 16:40'!writeDigital: anInteger to: anObject	Transcript cr; show: 'writeDigital: '; show: anInteger asString; show: ' to: '; show: anObject.! !!MicrobitSpriteMorph methodsFor: 'led blocks' stamp: 'EiichiroIto 6/27/2018 19:00'!clearPixels	led clear! !!MicrobitSpriteMorph methodsFor: 'led blocks' stamp: 'EiichiroIto 6/27/2018 19:00'!getPixelAtx: x y: y	^ led x: x y: y! !!MicrobitSpriteMorph methodsFor: 'led blocks' stamp: 'EiichiroIto 6/21/2018 16:40'!imageOf: aString	^ Array with: aString! !!MicrobitSpriteMorph methodsFor: 'led blocks' stamp: 'EiichiroIto 6/20/2018 13:00'!isOnLed	^ led active! !!MicrobitSpriteMorph methodsFor: 'led blocks' stamp: 'EiichiroIto 6/20/2018 12:59'!offLed	led active: false.! !!MicrobitSpriteMorph methodsFor: 'led blocks' stamp: 'EiichiroIto 6/20/2018 12:59'!onLed	led active: true.! !!MicrobitSpriteMorph methodsFor: 'led blocks' stamp: 'EiichiroIto 6/27/2018 19:00'!scroll: anObject	led scroll: anObject asString.! !!MicrobitSpriteMorph methodsFor: 'led blocks' stamp: 'EiichiroIto 6/27/2018 19:00'!setPixelAtx: x y: y v: v 	led x: x y: y v: v.! !!MicrobitSpriteMorph methodsFor: 'led blocks' stamp: 'EiichiroIto 6/21/2018 16:26'!showArrow: aSymbol	self showSymbol: aSymbol.! !!MicrobitSpriteMorph methodsFor: 'led blocks' stamp: 'EiichiroIto 6/27/2018 19:00'!showChar: aStringOrArray 	| c image |	aStringOrArray isEmpty ifTrue: [^ self].	image := (aStringOrArray isKindOf: String)				ifTrue: 					[c := aStringOrArray at: 1.					MicrobitLed charAt: c]				ifFalse: [aStringOrArray at: 1].	led showImage: image! !!MicrobitSpriteMorph methodsFor: 'led blocks' stamp: 'EiichiroIto 6/21/2018 16:26'!showCharacter: aSymbol	self showSymbol: aSymbol.! !!MicrobitSpriteMorph methodsFor: 'led blocks' stamp: 'EiichiroIto 6/21/2018 16:25'!showClock: aSymbol	self showSymbol: aSymbol.! !!MicrobitSpriteMorph methodsFor: 'led blocks' stamp: 'EiichiroIto 6/27/2018 19:00'!showShape: aSymbol	self showSymbol: aSymbol.! !!MicrobitSpriteMorph methodsFor: 'led blocks' stamp: 'EiichiroIto 6/27/2018 19:00'!showSymbol: aSymbol	| image |	image := MicrobitLed symbolAt: aSymbol.	led showImage: image.! !!MicrobitSpriteMorph methodsFor: 'object i/o' stamp: 'EiichiroIto 6/27/2018 19:00'!initFieldsFrom: anObjStream version: classVersion	super initFieldsFrom: anObjStream version: classVersion.	self initFieldsNamed: #(		buttons		led	) from: anObjStream.! !!MicrobitSpriteMorph methodsFor: 'object i/o' stamp: 'EiichiroIto 6/27/2018 19:00'!storeFieldsOn: anObjStream	super storeFieldsOn: anObjStream.	self storeFieldsNamed: #(		buttons		led	) on: anObjStream.! !!MicrobitSpriteMorph methodsFor: 'testing' stamp: 'EiichiroIto 6/22/2018 07:09'!isScrolling	^ led isScrolling! !!MicrobitSpriteMorph methodsFor: 'operators' stamp: 'EiichiroIto 6/23/2018 18:29'!abs: absoluteValue sign: signValue 	^ absoluteValue abs * signValue sign! !!MicrobitSpriteMorph methodsFor: 'operators' stamp: 'EiichiroIto 6/27/2018 19:00'!anyOf: aCollection 	| obj |	obj := aCollection atRandom.	(obj isKindOf: Character)		ifTrue: [obj := obj asString].	^ obj! !!MicrobitSpriteMorph methodsFor: 'operators' stamp: 'EiichiroIto 6/23/2018 11:40'!equal: x to: y	^ x = y! !!MicrobitSpriteMorph methodsFor: 'operators' stamp: 'EiichiroIto 6/23/2018 11:46'!false	^ false! !!MicrobitSpriteMorph methodsFor: 'operators' stamp: 'EiichiroIto 6/27/2018 19:00'!less: x than: y	^ x < y! !!MicrobitSpriteMorph methodsFor: 'operators' stamp: 'EiichiroIto 6/23/2018 11:40'!more: x than: y	^ x > y! !!MicrobitSpriteMorph methodsFor: 'operators' stamp: 'EiichiroIto 6/27/2018 19:00'!not: x	^ x not! !!MicrobitSpriteMorph methodsFor: 'operators' stamp: 'EiichiroIto 6/23/2018 11:33'!setRandomSeed: anInteger	Random seed: anInteger.! !!MicrobitSpriteMorph methodsFor: 'operators' stamp: 'EiichiroIto 6/23/2018 11:30'!stringOf: anObject	^ anObject asString! !!MicrobitSpriteMorph methodsFor: 'operators' stamp: 'EiichiroIto 6/23/2018 11:46'!true	^ true! !!MicrobitSpriteMorph methodsFor: 'operators' stamp: 'EiichiroIto 6/27/2018 19:00'!x: x andY: y	^ x & y! !!MicrobitSpriteMorph methodsFor: 'operators' stamp: 'EiichiroIto 6/27/2018 19:00'!x: x divY: y	^ x / y! !!MicrobitSpriteMorph methodsFor: 'operators' stamp: 'EiichiroIto 6/23/2018 11:27'!x: x minusY: y	^ x - y! !!MicrobitSpriteMorph methodsFor: 'operators' stamp: 'EiichiroIto 6/23/2018 11:28'!x: x modY: y	^ x \\ y! !!MicrobitSpriteMorph methodsFor: 'operators' stamp: 'EiichiroIto 6/23/2018 11:27'!x: x mulY: y	^ x * y! !!MicrobitSpriteMorph methodsFor: 'operators' stamp: 'EiichiroIto 6/27/2018 19:00'!x: x orY: y	^ x | y! !!MicrobitSpriteMorph methodsFor: 'operators' stamp: 'EiichiroIto 6/27/2018 19:00'!x: x plusY: y	^ x + y! !!MicrobitSpriteMorph methodsFor: 'sensing ops' stamp: 'EiichiroIto 6/27/2018 19:00'!calibrateCompass	calibrated := true.! !!MicrobitSpriteMorph methodsFor: 'sensing ops' stamp: 'EiichiroIto 6/23/2018 19:34'!clearCalibration	calibrated := false.! !!MicrobitSpriteMorph methodsFor: 'sensing ops' stamp: 'EiichiroIto 6/23/2018 18:58'!currentGesture	^ 'up'! !!MicrobitSpriteMorph methodsFor: 'sensing ops' stamp: 'EiichiroIto 6/23/2018 19:34'!fieldStrength	^ 0! !!MicrobitSpriteMorph methodsFor: 'sensing ops' stamp: 'EiichiroIto 6/23/2018 19:34'!headingCompass	^ 0! !!MicrobitSpriteMorph methodsFor: 'sensing ops' stamp: 'EiichiroIto 6/27/2018 19:00'!isCalibrated	^ calibrated! !!MicrobitSpriteMorph methodsFor: 'sensing ops' stamp: 'EiichiroIto 6/27/2018 19:00'!isGesture: aString	^ aString = self currentGesture! !!MicrobitSpriteMorph methodsFor: 'sensing ops' stamp: 'EiichiroIto 6/23/2018 18:33'!runningTime	^ Time millisecondClockValue - startMsec! !!MicrobitSpriteMorph methodsFor: 'sensing ops' stamp: 'EiichiroIto 6/27/2018 19:00'!sensorValueOf: aSymbol	^ 0! !!MicrobitSpriteMorph methodsFor: 'sensing ops' stamp: 'EiichiroIto 6/23/2018 18:33'!temperature	^ 0! !!MicrobitSpriteMorph methodsFor: 'sensing ops' stamp: 'EiichiroIto 6/23/2018 18:59'!wasGesture: aString	^ aString = self currentGesture! !!MicrobitSpriteMorph methodsFor: 'sound ops' stamp: 'EiichiroIto 6/24/2018 20:00'!getTempo	^ 120! !!MicrobitSpriteMorph methodsFor: 'sound ops' stamp: 'EiichiroIto 6/24/2018 20:00'!playMusicList: aCollection	! !!MicrobitSpriteMorph methodsFor: 'sound ops' stamp: 'EiichiroIto 6/24/2018 19:59'!playMusicSymbol: aSymbol	! !!MicrobitSpriteMorph methodsFor: 'sound ops' stamp: 'EiichiroIto 6/24/2018 19:59'!playMusicSymbolRepeat: aSymbol	! !!MicrobitSpriteMorph methodsFor: 'sound ops' stamp: 'EiichiroIto 6/24/2018 19:59'!playMusicSymbolWait: aSymbol	! !!MicrobitSpriteMorph methodsFor: 'sound ops' stamp: 'EiichiroIto 6/24/2018 20:01'!playPitch: hz msec: msec	! !!MicrobitSpriteMorph methodsFor: 'sound ops' stamp: 'EiichiroIto 6/24/2018 20:01'!resetMusic	! !!MicrobitSpriteMorph methodsFor: 'sound ops' stamp: 'EiichiroIto 6/24/2018 20:00'!resetTempo	! !!MicrobitSpriteMorph methodsFor: 'sound ops' stamp: 'EiichiroIto 6/24/2018 20:00'!setTempoBpm: anInteger	! !!MicrobitSpriteMorph methodsFor: 'sound ops' stamp: 'EiichiroIto 6/24/2018 20:00'!setTempoTicks: anInteger	! !!MicrobitSpriteMorph methodsFor: 'sound ops' stamp: 'EiichiroIto 6/24/2018 20:01'!stopMusic	! !!MicrobitSpriteMorph methodsFor: 'comm ops' stamp: 'EiichiroIto 6/24/2018 20:25'!offRadio	! !!MicrobitSpriteMorph methodsFor: 'comm ops' stamp: 'EiichiroIto 6/24/2018 20:25'!onRadio	! !!MicrobitSpriteMorph methodsFor: 'comm ops' stamp: 'EiichiroIto 6/24/2018 20:25'!receiveRadio	^ 'Hello!!'! !!MicrobitSpriteMorph methodsFor: 'comm ops' stamp: 'EiichiroIto 6/24/2018 20:26'!resetRadio	! !!MicrobitSpriteMorph methodsFor: 'comm ops' stamp: 'EiichiroIto 6/24/2018 20:25'!sendRadio: aString	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MicrobitSpriteMorph class	instanceVariableNames: ''!!MicrobitSpriteMorph class methodsFor: 'block specs' stamp: 'EiichiroIto 6/27/2018 19:00'!additionalControlBlocks	^ #(		'control'			('wait %n msecs'				t	mwait:elapsed:from: 1000)			('panic %n'					-	panic: 0)	)! !!MicrobitSpriteMorph class methodsFor: 'block specs' stamp: 'EiichiroIto 6/27/2018 19:00'!blockSpecs	"Answer a collection of block specifications for the blocks that are common to all objects. Block specificatons (Arrays) are interspersed with category names (Strings). A block specification is an Array of the form: (<block spec string> <block type> <selector> [optional initial argument values]).	Explanation of flags:		-	no flags		b	boolean reporter		c	c-shaped block containing a sequence of commands (always special form)		r	reporter		s	special form command with its own evaluation rule		t	timed command, like wait or glide		E	message event hat		K	key event hat		M	mouse-click event hat		S	start event hat		W	when <condition> hat (obsolete)"	^ self ioBlocks, self ledBlocks, self soundBlocks, self commBlocks, self sensingBlocks, self additionalControlBlocks, super blockSpecs! !!MicrobitSpriteMorph class methodsFor: 'block specs' stamp: 'EiichiroIto 6/27/2018 19:00'!commBlocks	^ #(		'comm'			('radio on'								-	onRadio)			('radio off'								-	offRadio)			-			('send a radio message %s'		-	sendRadio:	'Hello!!')			('receive a radio message'		r	receiveRadio)			-			('radio reset'							-	resetRadio)	)! !!MicrobitSpriteMorph class methodsFor: 'block specs' stamp: 'EiichiroIto 6/27/2018 19:00'!ioBlocks	^ #(		'io'			('button %M is pressed'			b		buttonIsPressed:)			('button %M was pressed'		b		buttonWasPressed:)			('count of button %M pressed'		r		countOfButtonPressed:)			-			('digital read pin %n'				r		readDigital: 0)			('digital write pin%n to %n'	-		writeDigital:to: 0 0) 			('analog read pin %n'				r		readAnalog: 0)			('analog write pin %n to %n'	- 		writeAnalog:to: 0 0)			('analog set period pin %n to %n msec'	- setAnalogPeriod:msec: 0 500)			('pin %n is touched'					b		pinIsTouched: 0)		)! !!MicrobitSpriteMorph class methodsFor: 'block specs' stamp: 'EiichiroIto 6/27/2018 19:00'!ledBlocks	^ #(		'led'			('scroll %s'					s		scrollAndWait)			('scroll %s no wait'		-		scroll: 		'World!!')			('show %s'					-		showChar:	'A')			('show symbol %g'		-		showSymbol:	heart)			('show clock %D'			-		showSymbol:	clock12)			('show arrow %I'			-		showSymbol:	arrowN)			('show shape %S'			-		showSymbol:	triangle)			('show character %l'	-		showSymbol: 	rabbit)			-			('image of %s'				r		imageOf:)			('all clocks'					r		allClocksImage)			('all arrows'					r		allArrowsImage)			-			('set x %n y %n to %n'		-	setPixelAtx:y:v: 0 0 0)			('point x %n y %n'	r	getPixelAtx:y: 0 0)			('clear'				-		clearPixels)			-			('led on'			-		onLed)			('led off'			-		offLed)			('led is on'			b		isOnLed)	)! !!MicrobitSpriteMorph class methodsFor: 'block specs' stamp: 'EiichiroIto 6/27/2018 19:00'!sensingBlocks	^ #(		'sensing'			('running time'			r	runningTime)			('temperature'				r	temperature)			('%H sensor value'		r	sensorValueOf: 'accelX')			-			('current gesture'		r	currentGesture)			('is gesture %m ?'		b	isGesture: up)			('was gesture %m ?'		b	wasGesture: up)			('gestures'					r	gestures)			-			('calibrate compass'		-	calibrateCompass)			('is calibrated'				b	isCalibrated)			('heading'						r	headingCompass)			('clear calibration'		-	clearCalibration)			('field strength'			r	fieldStrength)	)! !!MicrobitSpriteMorph class methodsFor: 'block specs' stamp: 'EiichiroIto 6/17/2018 09:49'!soundBlocks	^ #(		'sound'			('play music %N'						-	playMusicSymbol: nyan)			('play music %N repeat'			-	playMusicSymbolRepeat: nyan)			('play music %N until done'	-	playMusicSymbolWait: nyan)			('play music %L'				-	playMusicList:)			('set tempo to %n ticks'	-	setTempoTicks: 4)			('set tempo to %n bpm'		-	setTempoBpm: 120)			('reset tempo'					-	resetTempo)			('tempo'							r	getTempo)			('play pitch %n Hz for %n msec'	-	playPitch:msec: 440 1000)			('stop music'					-	stopMusic)			('reset music'					-	resetMusic)	)! !MicrobitLed initialize!